import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.decomposition import TruncatedSVD
import warnings
warnings.filterwarnings('ignore', category=UserWarning)

# Step 1: Data Preparation
print("Step 1: Preparing data for TruncatedSVD...")

# Select numeric columns (float64 and int64)
numeric_cols = df_customer.select_dtypes(include=['float64', 'int64']).columns
df_numeric = df_customer[numeric_cols]
print(f"Selected {len(numeric_cols)} numeric features: {list(numeric_cols)}")

# Select categorical columns (object and category, excluding CUST_NBR and dates)
categorical_cols = ['CUST_CLASS', 'CUST_CAT', 'JNT_ACCT_FLG', 'HIGHEST_TIER', 'MRTL_STS', 'ACT_LVL']
categorical_cols = [col for col in categorical_cols if col in df_customer.columns]
print(f"Selected {len(categorical_cols)} categorical features: {categorical_cols}")

# Encode categorical features
df_categorical = df_customer[categorical_cols].copy()
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    df_categorical[col] = le.fit_transform(df_customer[col].astype(str))  # Convert to string for consistency
    label_encoders[col] = le
print("Categorical features encoded with LabelEncoder")

# Combine numeric and encoded categorical features
df_combined = pd.concat([df_numeric, df_categorical], axis=1).astype('float32')
print(f"Combined {len(df_combined.columns)} features (numeric + categorical)")

# Normalize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_combined)
df_scaled = pd.DataFrame(df_scaled, columns=df_combined.columns, index=df_customer.index).astype('float32')
print("Data normalized to zero mean and unit variance")

# Step 2: Dimensionality Reduction with TruncatedSVD
print("Step 2: Running TruncatedSVD dimensionality reduction...")
svd = TruncatedSVD(
    n_components=2,      # Reduce to 2D
    random_state=42      # Reproducibility
)
embedding = svd.fit_transform(df_scaled)
embedding = pd.DataFrame(embedding, columns=['SVD1', 'SVD2'], index=df_customer.index).astype('float32')
print(f"TruncatedSVD reduction complete: Shape of embedding = {embedding.shape}")
print(f"Explained variance ratio: {svd.explained_variance_ratio_}")
print(f"Total explained variance: {sum(svd.explained_variance_ratio_):.4f}")

# Step 3: Add embedding to original DataFrame
df_customer['SVD1'] = embedding['SVD1']
df_customer['SVD2'] = embedding['SVD2']
print(f"Added SVD1 and SVD2 to df_customer. New shape: {df_customer.shape}")

# Step 4: Save embedding and label encoders
embedding.to_pickle('svd_embedding_with_categorical.pkl')
print("TruncatedSVD embedding saved to 'svd_embedding_with_categorical.pkl'")
import pickle
with open('label_encoders.pkl', 'wb') as f:
    pickle.dump(label_encoders, f)
print("Label encoders saved to 'label_encoders.pkl'")

# Optional: Visualize SVD embedding
try:
    import matplotlib.pyplot as plt
    plt.figure(figsize=(10, 6))
    plt.scatter(embedding['SVD1'], embedding['SVD2'], s=1, alpha=0.5)
    plt.title('TruncatedSVD Embedding with Categorical Features')
    plt.xlabel('SVD1')
    plt.ylabel('SVD2')
    plt.savefig('svd_categorical_visualization.png')
    plt.close()
    print("TruncatedSVD visualization saved to 'svd_categorical_visualization.png'")
except ImportError:
    print("Matplotlib not installed. Skipping visualization.")
