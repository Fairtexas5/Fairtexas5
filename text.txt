import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore', category=UserWarning)  # Suppress warnings

# Step 1: Data Preparation
print("Step 1: Preparing data for PCA...")

# Select numeric columns (float64 and int64)
numeric_cols = df_customer.select_dtypes(include=['float64', 'int64']).columns
df_numeric = df_customer[numeric_cols]
print(f"Selected {len(numeric_cols)} numeric features for PCA: {list(numeric_cols)}")

# Normalize the data
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_numeric)
df_scaled = pd.DataFrame(df_scaled, columns=numeric_cols, index=df_customer.index).astype('float32')
print("Data normalized to zero mean and unit variance")

# Step 2: Dimensionality Reduction with PCA
print("Step 2: Running PCA dimensionality reduction...")
pca = PCA(
    n_components=2,      # Reduce to 2D for clustering and visualization
    random_state=42      # Reproducibility
)
embedding = pca.fit_transform(df_scaled)
embedding = pd.DataFrame(embedding, columns=['PCA1', 'PCA2'], index=df_customer.index).astype('float32')
print(f"PCA reduction complete: Shape of embedding = {embedding.shape}")
print(f"Explained variance ratio: {pca.explained_variance_ratio_}")
print(f"Total explained variance: {sum(pca.explained_variance_ratio_):.4f}")

# Step 3: Add embedding to original DataFrame
df_customer['PCA1'] = embedding['PCA1']
df_customer['PCA2'] = embedding['PCA2']
print(f"Added PCA1 and PCA2 to df_customer. New shape: {df_customer.shape}")

# Step 4: Save embedding for clustering
embedding.to_pickle('pca_embedding.pkl')
print("PCA embedding saved to 'pca_embedding.pkl'")

# Optional: Visualize PCA embedding (requires matplotlib)
try:
    import matplotlib.pyplot as plt
    plt.figure(figsize=(10, 6))
    plt.scatter(embedding['PCA1'], embedding['PCA2'], s=1, alpha=0.5)
    plt.title('PCA Embedding of Customers')
    plt.xlabel('PCA1')
    plt.ylabel('PCA2')
    plt.savefig('pca_visualization.png')
    plt.close()
    print("PCA visualization saved to 'pca_visualization.png'")
except ImportError:
    print("Matplotlib not installed. Skipping visualization.")
