import pandas as pd
import numpy as np
from datetime import datetime

# Load and prepare data
df = pd.read_csv('Book1_small.csv')
df['ACCT_OPN_DT'] = pd.to_datetime(df['ACCT_OPN_DT'], format='%d/%m/%y', errors='coerce')
df['REPORT_DT'] = pd.to_datetime(df['REPORT_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_CR_DT'] = pd.to_datetime(df['LST_CUST_CR_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_DR_DT'] = pd.to_datetime(df['LST_CUST_DR_DT'], format='%d/%m/%y', errors='coerce')

OBSERVATION_PERIOD_DAYS = 90
reference_date = df['REPORT_DT'].max()
df_sb = df[df['PF_FAC_REPT'] == 'SB'].copy()

# --- Digital Engagement Score ---
digital_features = ['ATM', 'MBS', 'YONO', 'UPI', 'INB']
base_weights_digital = {'INB': 5, 'YONO': 4, 'MBS': 3, 'UPI': 2, 'ATM': 1}
overall_usage_digital = df_sb[digital_features].mean()
tier_usage_digital = df_sb.groupby('CUST_CLASS')[digital_features].mean()

weights_digital = {}
for tier in tier_usage_digital.index:
    weights_digital[tier] = {}
    for feature in digital_features:
        tier_avg = tier_usage_digital.loc[tier, feature]
        overall_avg = overall_usage_digital[feature]
        weights_digital[tier][feature] = base_weights_digital[feature] * (tier_avg / (overall_avg + 0.01))

# --- Transaction Score ---
transaction_features = ['DR_AMT', 'CR_AMT']
base_weights_transaction = {'DR_AMT': 1, 'CR_AMT': 1}
overall_usage_transaction = df_sb[transaction_features].mean()
tier_usage_transaction = df_sb.groupby('CUST_CLASS')[transaction_features].mean()

weights_transaction = {}
for tier in tier_usage_transaction.index:
    weights_transaction[tier] = {}
    for feature in transaction_features:
        tier_avg = tier_usage_transaction.loc[tier, feature]
        overall_avg = overall_usage_transaction[feature]
        weights_transaction[tier][feature] = base_weights_transaction[feature] * (tier_avg / (overall_avg + 0.01))

# --- Product Score ---
product_features = ['FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN']
base_weights_product = {'FD': 3, 'RD': 2, 'PERSONAL_LOAN': 4, 'HOME_LOAN': 5}
overall_usage_product = df_sb[product_features].mean()
tier_usage_product = df_df.groupby('CUST_CLASS')[product_features].mean()

weights_product = {}
for tier in tier_usage_product.index:
    weights_product[tier] = {}
    for feature in product_features:
        tier_avg = tier_usage_product.loc[tier, feature]
        overall_avg = overall_usage_product[feature]
        weights_product[tier][feature] = base_weights_product[feature] * (tier_avg / (overall_avg + 0.01))

# --- Pre-Aggregation Base Features ---
df_sb['transaction_frequency'] = df_sb['DR_NO'] + df_sb['CR_NO']
df_sb['DAYS_SINCE_LAST_CR'] = (reference_date - df_sb['LST_CUST_CR_DT']).dt.days
df_sb['DAYS_SINCE_LAST_DR'] = (reference_date - df_sb['LST_CUST_DR_DT']).dt.days
df_sb['days_since_last_txn'] = df_sb[['DAYS_SINCE_LAST_CR', 'DAYS_SINCE_LAST_DR']].min(axis=1, skipna=True)
df_sb['JNT_ACCT_FLG_NUM'] = df_sb['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)

# --- Aggregation Dictionary (Base Features Only) ---
agg_dict = {
    # Identity & Demographics
    'CUST_CLASS': 'first',
    'CUST_CAT': lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0],
    'SALARY': 'max',
    'STAFF': 'max',
    'NRI': 'max',
    'AGRI': 'max',
    'SME': 'max',
    'SBF': 'max',
    'SSI': 'max',

    # Financial Position & Behavior
    'END_OF_DAY_BAL': 'sum',
    'AVG_BAL_MTD': 'sum',  # Changed to sum for total balance
    'AVG_BAL_QTD': 'sum',  # Changed to sum for total balance
    'AVG_BAL_YTD': 'sum',  # Changed to sum for total balance
    'AQB': 'sum',
    'TDV': 'sum',
    'DR_AMT': 'sum',
    'CR_AMT': 'sum',
    'DR_NO': 'sum',
    'CR_NO': 'sum',

    # Product Holdings
    'SAVINGS_BANK': 'max',
    'FD': 'max',
    'RD': 'max',
    'PERSONAL_LOAN': 'max',
    'HOME_LOAN': 'max',
    'CAR_LOAN': 'max',
    'EDUCATION_LOAN': 'max',
    'GOLD_LOAN': 'max',
    'HOME_LOAN_AMT': 'sum',
    'SBI_MF': 'max',
    'SBI_CAP': 'max',
    'SBI_CARD': 'max',
    'SBI_LFE': 'max',
    'SBI_GNRL': 'max',
    'APY': 'max',
    'NPS': 'max',
    'PMJJY': 'max',
    'PMSBY': 'max',

    # Channel Usage
    'ATM': 'max',
    'MBS': 'max',
    'YONO': 'max',
    'UPI': 'max',
    'INB': 'max',
    'LOCKER': 'max',

    # Account Characteristics
    'JNT_ACCT_FLG': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N',
    'ACCT_OPN_DT': 'min',
    'REPORT_DT': 'max',
    'TENURE_DAYS': 'max',
    'DAYS_SINCE_LAST_CR': 'min',
    'DAYS_SINCE_LAST_DR': 'min',
    'days_since_last_txn': 'min',
}

# Aggregate to customer level
df_customer = df_sb.groupby('CUST_NBR').agg(agg_dict).reset_index()

# --- Post-Aggregation Feature Engineering ---

# Recalculate basic counts
df_customer['transaction_frequency'] = df_customer['DR_NO'] + df_customer['CR_NO']
df_customer['JNT_ACCT_FLG_NUM'] = df_customer['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)

# Product counts
product_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN',
                'EDUCATION_LOAN', 'GOLD_LOAN', 'SBI_MF', 'SBI_CAP', 'SBI_CARD',
                'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS', 'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT'] = df_customer[product_cols].eq(1).sum(axis=1)
service_cols = ['SBI_MF', 'SBI_CAP', 'SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS', 'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT_EXCL_SERVICES'] = df_customer[product_cols].eq(1).sum(axis=1) - df_customer[service_cols].eq(1).sum(axis=1)

# Digital Engagement Score
def compute_digital_engagement(row):
    tier = row['CUST_CLASS']
    if tier not in weights_digital:
        return 0
    score = 0
    for feature in digital_features:
        if row[feature] == 1:
            score += weights_digital[tier][feature]
    return score
df_customer['digital_engagement'] = df_customer.apply(compute_digital_engagement, axis=1)

# Transaction Score
def compute_transaction_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_transaction:
        return 0
    score = weights_transaction[tier]['DR_AMT'] * row['DR_AMT'] + weights_transaction[tier]['CR_AMT'] * row['CR_AMT']
    return score
df_customer['transaction_score'] = df_customer.apply(compute_transaction_score, axis=1)

# Product Score
def compute_product_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_product:
        return 0
    score = 0
    for feature in product_features:
        if row[feature] == 1:
            score += weights_product[tier][feature]
    return score
df_customer['product_score'] = df_customer.apply(compute_product_score, axis=1)

# Behavioral Features
df_customer['transaction_velocity'] = df_customer['transaction_frequency'] / OBSERVATION_PERIOD_DAYS
df_customer['monthly_transaction_rate'] = df_customer['transaction_frequency'] / 3
df_customer['avg_transaction_amt'] = (df_customer['DR_AMT'] + df_customer['CR_AMT']) / (df_customer['transaction_frequency'] + 1e-6)
df_customer['balance_stability'] = df_customer['AVG_BAL_QTD'] / (df_customer['END_OF_DAY_BAL'] + 1e-6)
df_customer['balance_growth_indicator'] = df_customer['END_OF_DAY_BAL'] / (df_customer['AVG_BAL_QTD'] + 1e-6)
df_customer['monthly_balance_trend'] = df_customer['AVG_BAL_MTD'] / (df_customer['AVG_BAL_QTD'] + 1e-6)

# Investment, Loan, and Service Features
investment_products = ['FD', 'RD', 'SBI_MF', 'SBI_CAP', 'NPS']
df_customer['investment_orientation'] = df_customer[investment_products].sum(axis=1)
df_customer['investment_diversity'] = df_customer[investment_products].gt(0).sum(axis=1)

loan_products = ['PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN', 'EDUCATION_LOAN']
df_customer['loan_sophistication'] = df_customer[loan_products].sum(axis=1)
df_customer['secured_loan_preference'] = (df_customer['HOME_LOAN'] + df_customer['CAR_LOAN']) / (df_customer['loan_sophistication'] + 1e-6)

service_products = ['SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'PMJJY', 'PMSBY']
df_customer['service_adoption'] = df_customer[service_products].sum(axis=1)

# Premium Banking Indicator
df_customer['premium_banking'] = ((df_customer['CUST_CLASS'].isin(['ROHDIUM', 'PLATINUM', 'DIAMOND'])) &
                                 (df_customer['AVG_BAL_QTD'] > df_sb['AVG_BAL_QTD'].quantile(0.8))).astype(int)

# Channel Sophistication
df_customer['channel_sophistication'] = (df_customer['YONO'] * 3 + df_customer['INB'] * 2 + df_customer['UPI'] * 1.5 +
                                        df_customer['MBS'] * 1 + df_customer['ATM'] * 0.5)

# Cross-Sell Success
df_customer['cross_sell_success'] = df_customer['TOTAL_PRODUCT'] / (df_customer['TENURE_DAYS'] / 365 + 1e-6)

# Relationship Depth
df_customer['relationship_depth'] = (df_customer['investment_orientation'] + df_customer['loan_sophistication'] +
                                    df_customer['service_adoption'] + df_customer['digital_engagement'])

# Additional Features
df_customer['AVG_DR_AMT'] = df_customer['DR_AMT'] / df_customer['DR_NO'].replace(0, 1)
df_customer['AVG_CR_AMT'] = df_customer['CR_AMT'] / df_customer['CR_NO'].replace(0, 1)
df_customer['net_flow_amt'] = df_customer['CR_AMT'] - df_customer['DR_AMT']
df_customer['net_flow_ratio'] = df_customer['net_flow_amt'] / (df_customer['CR_AMT'] + df_customer['DR_AMT'] + 1e-6)
df_customer['balance_utilization'] = (df_customer['DR_AMT'] + df_customer['CR_AMT']) / (df_customer['AVG_BAL_QTD'] + 1e-6)
df_customer['monthly_balance_utilization'] = df_customer['balance_utilization'] / 3
df_customer['peak_balance_ratio'] = df_customer['END_OF_DAY_BAL'] / (df_customer['AVG_BAL_QTD'] + 1e-6)

product_div_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'SBI_MF', 'UPI', 'INB']
df_customer['product_diversity'] = df_customer[product_div_cols].gt(0).sum(axis=1) / len(product_div_cols)

loan_cols = ['PERSONAL_LOAN', 'HOME_LOAN']
investment_cols = ['FD', 'RD', 'SBI_MF']
df_customer['loan_to_investment'] = df_customer[loan_cols].sum(axis=1) / (df_customer[investment_cols].sum(axis=1) + 1e-6)

digital_cols = ['MBS', 'YONO', 'UPI', 'INB']
physical_cols = ['ATM', 'LOCKER']
df_customer['digital_to_physical'] = df_customer[digital_cols].sum(axis=1) / (df_customer[physical_cols].sum(axis=1) + 1e-6)

df_customer['joint_adjusted_dr_amt'] = df_customer['DR_AMT'] / df_customer['JNT_ACCT_FLG_NUM']
df_customer['dormancy_risk'] = (df_customer['days_since_last_txn'] > 30).astype(int)
df_customer['severe_dormancy_risk'] = (df_customer['days_since_last_txn'] > 60).astype(int)

df_customer['transaction_intensity'] = df_customer['transaction_frequency'] / OBSERVATION_PERIOD_DAYS
df_customer['tenure_txn_interaction'] = df_customer['TENURE_DAYS'] * df_customer['transaction_intensity']
df_customer['product_balance_interaction'] = df_customer['TOTAL_PRODUCT'] * df_customer['AVG_BAL_QTD']
df_customer['value_intensity'] = (df_customer['DR_AMT'] + df_customer['CR_AMT']) / OBSERVATION_PERIOD_DAYS
df_customer['credit_to_debit_ratio'] = df_customer['CR_AMT'] / (df_customer['DR_AMT'] + 1e-6)
df_customer['transaction_count_ratio'] = df_customer['CR_NO'] / (df_customer['DR_NO'] + 1e-6)
df_customer['activity_level'] = pd.cut(df_customer['transaction_frequency'],
                                       bins=[0, 5, 20, 50, float('inf')],
                                       labels=['Low', 'Medium', 'High', 'Very_High'])
