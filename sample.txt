import pandas as pd
import numpy as np
from datetime import datetime

# Load and prepare data
df = pd.read_csv('Book1_small.csv')
df['ACCT_OPN_DT'] = pd.to_datetime(df['ACCT_OPN_DT'], format='%d/%m/%y', errors='coerce')
df['REPORT_DT'] = pd.to_datetime(df['REPORT_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_CR_DT'] = pd.to_datetime(df['LST_CUST_CR_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_DR_DT'] = pd.to_datetime(df['LST_CUST_DR_DT'], format='%d/%m/%y', errors='coerce')

OBSERVATION_PERIOD_DAYS = 90
reference_date = df['REPORT_DT'].max()
df_sb = df[df['PF_FAC_REPT'] == 'SB'].copy()

# --- Digital Engagement Score ---
digital_features = ['ATM', 'MBS', 'YONO', 'UPI', 'INB']
base_weights_digital = {'INB': 5, 'YONO': 4, 'MBS': 3, 'UPI': 2, 'ATM': 1}
overall_usage_digital = df_sb[digital_features].mean()
tier_usage_digital = df_sb.groupby('CUST_CLASS')[digital_features].mean()

weights_digital = {}
for tier in tier_usage_digital.index:
    weights_digital[tier] = {}
    for feature in digital_features:
        tier_avg = tier_usage_digital.loc[tier, feature]
        overall_avg = overall_usage_digital[feature]
        weights_digital[tier][feature] = base_weights_digital[feature] * (tier_avg / (overall_avg + 0.01))

def compute_digital_engagement(row):
    tier = row['CUST_CLASS']
    if tier not in weights_digital:
        return 0
    score = 0
    for feature in digital_features:
        if row[feature] == 1:
            score += weights_digital[tier][feature]
    return score

df_sb['digital_engagement'] = df_sb.apply(compute_digital_engagement, axis=1)

# --- Transaction Score ---
transaction_features = ['DR_AMT', 'CR_AMT']
base_weights_transaction = {'DR_AMT': 1, 'CR_AMT': 1}
overall_usage_transaction = df_sb[transaction_features].mean()
tier_usage_transaction = df_sb.groupby('CUST_CLASS')[transaction_features].mean()

weights_transaction = {}
for tier in tier_usage_transaction.index:
    weights_transaction[tier] = {}
    for feature in transaction_features:
        tier_avg = tier_usage_transaction.loc[tier, feature]
        overall_avg = overall_usage_transaction[feature]
        weights_transaction[tier][feature] = base_weights_transaction[feature] * (tier_avg / (overall_avg + 0.01))

def compute_transaction_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_transaction:
        return 0
    score = 0
    for feature in transaction_features:
        score += weights_transaction[tier][feature] * row[feature]
    return score

df_sb['transaction_score'] = df_sb.apply(compute_transaction_score, axis=1)

# --- Product Score ---
product_features = ['FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN']
base_weights_product = {'FD': 3, 'RD': 2, 'PERSONAL_LOAN': 4, 'HOME_LOAN': 5}
overall_usage_product = df_sb[product_features].mean()
tier_usage_product = df_sb.groupby('CUST_CLASS')[product_features].mean()

weights_product = {}
for tier in tier_usage_product.index:
    weights_product[tier] = {}
    for feature in product_features:
        tier_avg = tier_usage_product.loc[tier, feature]
        overall_avg = overall_usage_product[feature]
        weights_product[tier][feature] = base_weights_product[feature] * (tier_avg / (overall_avg + 0.01))

def compute_product_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_product:
        return 0
    score = 0
    for feature in product_features:
        if row[feature] == 1:
            score += weights_product[tier][feature]
    return score

df_sb['product_score'] = df_sb.apply(compute_product_score, axis=1)

# --- Behavioral Features ---

# Transaction frequency and velocity (3-month period)
df_sb['transaction_frequency'] = df_sb['DR_NO'] + df_sb['CR_NO']
df_sb['transaction_velocity_3m'] = df_sb['transaction_frequency'] / OBSERVATION_PERIOD_DAYS  # per day
df_sb['monthly_transaction_rate'] = df_sb['transaction_frequency'] / 3  # per month

# Average transaction amount
df_sb['avg_transaction_amt'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / (df_sb['transaction_frequency'] + 1e-6)

# Balance stability and growth (using AVG_BAL_QTD)
df_sb['balance_stability'] = df_sb['AVG_BAL_QTD'] / (df_sb['END_OF_DAY_BAL'] + 1e-6)
df_sb['balance_growth_indicator'] = df_sb['END_OF_DAY_BAL'] / (df_sb['AVG_BAL_QTD'] + 1e-6)
df_sb['monthly_balance_trend'] = df_sb['AVG_BAL_MTD'] / (df_sb['AVG_BAL_QTD'] + 1e-6)

# Investment, loan, and service features
investment_products = ['FD', 'RD', 'SBI_MF', 'SBI_CAP', 'NPS']
df_sb['investment_orientation'] = df_sb[investment_products].sum(axis=1)
df_sb['investment_diversity'] = df_sb[investment_products].gt(0).sum(axis=1)

loan_products = ['PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN', 'EDUCATION_LOAN']
df_sb['loan_sophistication'] = df_sb[loan_products].sum(axis=1)
df_sb['secured_loan_preference'] = (df_sb['HOME_LOAN'] + df_sb['CAR_LOAN']) / (df_sb['loan_sophistication'] + 1e-6)

service_products = ['SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'LOCKER', 'APY', 'PMJJY', 'PMSBY']
df_sb['service_adoption'] = df_sb[service_products].sum(axis=1)

# Premium customer indicator
df_sb['premium_banking'] = ((df_sb['CUST_CLASS'].isin(['ROHDIUM', 'PLATINUM', 'DIAMOND'])) &
                           (df_sb['AVG_BAL_QTD'] > df_sb['AVG_BAL_QTD'].quantile(0.8))).astype(int)

# Channel preference sophistication
df_sb['channel_sophistication'] = (df_sb['YONO'] * 3 + df_sb['INB'] * 2 + df_sb['UPI'] * 1.5 +
                                  df_sb['MBS'] * 1 + df_sb['ATM'] * 0.5)

# Cross-sell success (products per year of tenure)
df_sb['cross_sell_success'] = df_sb['TOTAL_PRODUCT'] / (df_sb['TENURE_DAYS'] / 365 + 1e-6)

# Relationship depth
df_sb['relationship_depth'] = (df_sb['investment_orientation'] + df_sb['loan_sophistication'] +
                              df_sb['service_adoption'] + df_sb['digital_engagement'])

# --- Pre-Aggregation Features ---

# Average transaction amounts
df_sb['AVG_DR_AMT'] = df_sb['DR_AMT'] / df_sb['DR_NO'].replace(0, 1)
df_sb['AVG_CR_AMT'] = df_sb['CR_AMT'] / df_sb['CR_NO'].replace(0, 1)

# Days since last transaction
df_sb['DAYS_SINCE_LAST_CR'] = (reference_date - df_sb['LST_CUST_CR_DT']).dt.days
df_sb['DAYS_SINCE_LAST_DR'] = (reference_date - df_sb['LST_CUST_DR_DT']).dt.days
df_sb['days_since_last_txn'] = df_sb[['DAYS_SINCE_LAST_CR', 'DAYS_SINCE_LAST_DR']].min(axis=1, skipna=True)

# Net flow in 3-month period
df_sb['net_flow_amt'] = df_sb['CR_AMT'] - df_sb['DR_AMT']
df_sb['net_flow_ratio'] = df_sb['net_flow_amt'] / (df_sb['CR_AMT'] + df_sb['DR_AMT'] + 1e-6)

# Balance utilization (using AVG_BAL_QTD)
df_sb['balance_utilization'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / (df_sb['AVG_BAL_QTD'] + 1e-6)
df_sb['monthly_balance_utilization'] = df_sb['balance_utilization'] / 3

# Peak balance ratio
df_sb['peak_balance_ratio'] = df_sb['END_OF_DAY_BAL'] / (df_sb['AVG_BAL_QTD'] + 1e-6)

# Product diversity
product_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'SBI_MF', 'UPI', 'INB']
df_sb['product_diversity'] = df_sb[product_cols].gt(0).sum(axis=1) / len(product_cols)

# Ratios
loan_cols = ['PERSONAL_LOAN', 'HOME_LOAN']
investment_cols = ['FD', 'RD', 'SBI_MF']
df_sb['loan_to_investment'] = df_sb[loan_cols].sum(axis=1) / (df_sb[investment_cols].sum(axis=1) + 1e-6)

digital_cols = ['MBS', 'YONO', 'UPI', 'INB']
physical_cols = ['ATM', 'LOCKER']
df_sb['digital_to_physical'] = df_sb[digital_cols].sum(axis=1) / (df_sb[physical_cols].sum(axis=1) + 1e-6)

# Other features
df_sb['agri_activity_flag'] = ((df_sb['AGRI'] == 1) & (df_sb['AGRI_LOAN'] > 0)).astype(int)
df_sb['JNT_ACCT_FLG_NUM'] = df_sb['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)
df_sb['joint_adjusted_dr_amt'] = df_sb['DR_AMT'] / df_sb['JNT_ACCT_FLG_NUM']

# Dormancy risk (3-month period)
df_sb['dormancy_risk_3m'] = (df_sb['days_since_last_txn'] > 30).astype(int)
df_sb['severe_dormancy_risk'] = (df_sb['days_since_last_txn'] > 60).astype(int)

# Interaction Features
df_sb['transaction_intensity_3m'] = df_sb['transaction_frequency'] / OBSERVATION_PERIOD_DAYS
df_sb['tenure_txn_interaction'] = df_sb['TENURE_DAYS'] * df_sb['transaction_intensity_3m']
df_sb['product_balance_interaction'] = df_sb['TOTAL_PRODUCT'] * df_sb['AVG_BAL_QTD']

# Additional 3-Month Behavioral Indicators
df_sb['value_intensity_3m'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / OBSERVATION_PERIOD_DAYS
df_sb['credit_to_debit_ratio'] = df_sb['CR_AMT'] / (df_sb['DR_AMT'] + 1e-6)
df_sb['transaction_count_ratio'] = df_sb['CR_NO'] / (df_sb['DR_NO'] + 1e-6)

# Activity level in 3-month period
df_sb['activity_level_3m'] = pd.cut(df_sb['transaction_frequency'],
                                   bins=[0, 5, 20, 50, float('inf')],
                                   labels=['Low', 'Medium', 'High', 'Very_High'])

import pandas as pd

# Aggregation dictionary
agg_dict = {
    # Identity & Demographics
    'CUST_CLASS': 'first',
    'CUST_CAT': lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0],
    'SALARY': 'max',
    'STAFF': 'max',
    'NRI': 'max',
    'AGRI': 'max',
    'SME': 'max',
    'SBF': 'max',
    'SSI': 'max',

    # Financial Position & Behavior
    'END_OF_DAY_BAL': 'sum',
    'AVG_BAL_MTD': 'sum',
    'AVG_BAL_QTD': 'sum',
    'AVG_BAL_YTD': 'sum',
    'AQB': 'sum',
    'TDV': 'sum',
    'DR_AMT': 'sum',
    'CR_AMT': 'sum',
    'DR_NO': 'sum',
    'CR_NO': 'sum',

    # Product Holdings
    'SAVINGS_BANK': 'max',
    'FD': 'max',
    'RD': 'max',
    'PERSONAL_LOAN': 'max',
    'HOME_LOAN': 'max',
    'CAR_LOAN': 'max',
    'TWO_WHEELER': 'max',
    'EDUCATION_LOAN': 'max',
    'GOLD_LOAN': 'max',
    'AGRI_LOAN': 'max',
    'SME_LOAN': 'max',
    'HOME_LOAN_AMT': 'sum',
    'SBI_MF': 'max',
    'SBI_CAP': 'max',
    'SBI_CARD': 'max',
    'SBI_LFE': 'max',
    'SBI_GNRL': 'max',
    'APY': 'max',
    'NPS': 'max',
    'PMJJY': 'max',
    'PMSBY': 'max',

    # Channel Usage
    'ATM': 'max',
    'MBS': 'max',
    'YONO': 'max',
    'UPI': 'max',
    'INB': 'max',
    'LOCKER': 'max',

    # Product Metrics (will recalculate TOTAL_PRODUCT post-aggregation)
    'TOTAL_PRODUCT': 'sum',  # Temporary, will override
    'TOTAL_PRODUCT_EXCL_SERVICES': 'sum',  # Temporary, will override

    # Account Characteristics
    'JNT_ACCT_FLG': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N',
    'ACCT_OPN_DT': 'min',
    'LST_CUST_CR_DT': 'max',
    'LST_CUST_DR_DT': 'max',
    'REPORT_DT': 'max',

    # Basic Behavioral Features
    'TENURE_DAYS': 'max',
    'AVG_DR_AMT': 'mean',
    'AVG_CR_AMT': 'mean',
    'DAYS_SINCE_LAST_CR': 'min',
    'DAYS_SINCE_LAST_DR': 'min',
    'net_flow_amt': 'sum',
    'balance_utilization': 'mean',
    'peak_balance_ratio': 'mean',
    'product_diversity': 'mean',
    'loan_to_investment': 'mean',
    'digital_to_physical': 'mean',
    'agri_activity_flag': 'max',
    'joint_adjusted_dr_amt': 'sum',
    'days_since_last_txn': 'min',
    'dormancy_risk': 'max',
    'product_adoption_rate': 'mean',  # Will recalculate
    'product_balance_interaction': 'sum',  # Will recalculate
    'tenure_txn_interaction': 'sum',  # Will recalculate

    # Enhanced Behavioral Features
    'transaction_frequency': 'sum',
    'transaction_velocity': 'mean',  # Will recalculate
    'high_value_txn_ratio': 'mean',
    'balance_stability': 'mean',
    'wealth_accumulation': 'mean',
    'investment_orientation': 'max',
    'investment_diversity': 'max',
    'loan_sophistication': 'max',
    'secured_loan_preference': 'mean',
    'service_adoption': 'max',
    'premium_banking': 'max',
    'channel_sophistication': 'max',
    'cross_sell_success': 'mean',  # Will recalculate
    'relationship_depth': 'max',

    # Weighted Scores
    'digital_engagement': 'sum',
    'transaction_score': 'sum',
    'product_score': 'sum'
}

# Aggregate to customer level
df_customer = df_sb.groupby('CUST_NBR').agg(agg_dict).reset_index()

# Post-aggregation feature engineering
df_customer['JNT_ACCT_FLG_NUM'] = df_customer['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)
df_customer['joint_adjusted_dr_amt'] = df_customer['DR_AMT'] / df_customer['JNT_ACCT_FLG_NUM']
df_customer['dormancy_risk'] = (df_customer['days_since_last_txn'] > 90).astype(int)

# Recalculate product counts
product_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN',
                'TWO_WHEELER', 'EDUCATION_LOAN', 'GOLD_LOAN', 'AGRI_LOAN', 'SME_LOAN',
                'SBI_MF', 'SBI_CAP', 'SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS',
                'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT'] = df_customer[product_cols].eq(1).sum(axis=1)
service_cols = ['SBI_MF', 'SBI_CAP', 'SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS', 'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT_EXCL_SERVICES'] = df_customer[product_cols].eq(1).sum(axis=1) - df_customer[service_cols].eq(1).sum(axis=1)

# Recalculate behavioral features
df_customer['product_adoption_rate'] = df_customer['TOTAL_PRODUCT'] / (df_customer['TENURE_DAYS'] / 365 + 1e-6)
df_customer['product_balance_interaction'] = df_customer['TOTAL_PRODUCT'] * df_customer['AVG_BAL_YTD']
df_customer['tenure_txn_interaction'] = df_customer['TENURE_DAYS'] * (df_customer['DR_NO'] + df_customer['CR_NO'])
df_customer['transaction_velocity'] = df_customer['transaction_frequency'] / (df_customer['TENURE_DAYS'] + 1e-6)
df_customer['cross_sell_success'] = df_customer['TOTAL_PRODUCT'] / (len(product_cols) + 1e-6)








