# --- Step 1: Load and Process Transaction Data with Monthly Features ---
print("Step 1: Loading and processing transaction data with monthly breakdown...")

try:
    # Load transaction CSVs
    jan_txn = pd.read_csv('jan_transactions.csv')
    feb_txn = pd.read_csv('feb_transactions.csv')
    mar_txn = pd.read_csv('mar_transactions.csv')
    
    # Standardize column names
    month_prefixes = ['JAN25', 'FEB25', 'MAR25']
    txn_dfs = [jan_txn, feb_txn, mar_txn]
    months = ['JAN', 'FEB', 'MAR']
    
    for i, df in enumerate(txn_dfs):
        month = month_prefixes[i]
        df.columns = [col.replace(f'_{month}', '') for col in df.columns]
        # Add month identifier
        df['MONTH'] = months[i]
    
    # Concatenate all months
    txn_df = pd.concat(txn_dfs, ignore_index=True)
    
    # Define key transaction channels for high-value customer segmentation
    key_channels = ['UPI', 'NEFT', 'RTGS', 'INB']  # Focus on digital and high-value channels
    
    # Process each month separately first
    monthly_features = {}
    
    for month in months:
        month_data = txn_df[txn_df['MONTH'] == month].copy()
        
        if len(month_data) == 0:
            continue
            
        # Define aggregation for key channels only
        month_agg_dict = {}
        
        # Key channels for high-value customers
        for channel in key_channels:
            if f'{channel}_CR_CNT' in month_data.columns:
                month_agg_dict[f'{channel}_CR_CNT_{month}'] = f'{channel}_CR_CNT'
            if f'{channel}_DR_CNT' in month_data.columns:
                month_agg_dict[f'{channel}_DR_CNT_{month}'] = f'{channel}_DR_CNT'
            if f'{channel}_CR_AMT' in month_data.columns:
                month_agg_dict[f'{channel}_CR_AMT_{month}'] = f'{channel}_CR_AMT'
            if f'{channel}_DR_AMT' in month_data.columns:
                month_agg_dict[f'{channel}_DR_AMT_{month}'] = f'{channel}_DR_AMT'
        
        # Aggregate by account
        if month_agg_dict:
            month_account = month_data.groupby('ACCT_NBR').agg({
                col: 'sum' for col in month_agg_dict.values() if col in month_data.columns
            }).reset_index()
            
            # Rename columns to include month
            rename_dict = {v: k for k, v in month_agg_dict.items() if v in month_account.columns}
            month_account = month_account.rename(columns=rename_dict)
            
            monthly_features[month] = month_account
    
    # Merge monthly features
    txn_account = None
    for month, month_df in monthly_features.items():
        if txn_account is None:
            txn_account = month_df
        else:
            txn_account = txn_account.merge(month_df, on='ACCT_NBR', how='outer')
    
    if txn_account is not None:
        # Fill NaN values with 0
        txn_account = txn_account.fillna(0)
        
        # --- Key Features for High-Value Customer Segmentation ---
        
        # 1. Total Quarterly Activity (sum across all months)
        for channel in key_channels:
            cr_cols = [f'{channel}_CR_CNT_{month}' for month in months if f'{channel}_CR_CNT_{month}' in txn_account.columns]
            dr_cols = [f'{channel}_DR_CNT_{month}' for month in months if f'{channel}_DR_CNT_{month}' in txn_account.columns]
            cr_amt_cols = [f'{channel}_CR_AMT_{month}' for month in months if f'{channel}_CR_AMT_{month}' in txn_account.columns]
            dr_amt_cols = [f'{channel}_DR_AMT_{month}' for month in months if f'{channel}_DR_AMT_{month}' in txn_account.columns]
            
            if cr_cols:
                txn_account[f'{channel}_TOTAL_CR_CNT'] = txn_account[cr_cols].sum(axis=1)
            if dr_cols:
                txn_account[f'{channel}_TOTAL_DR_CNT'] = txn_account[dr_cols].sum(axis=1)
            if cr_amt_cols:
                txn_account[f'{channel}_TOTAL_CR_AMT'] = txn_account[cr_amt_cols].sum(axis=1)
            if dr_amt_cols:
                txn_account[f'{channel}_TOTAL_DR_AMT'] = txn_account[dr_amt_cols].sum(axis=1)
        
        # 2. Month-over-Month Growth/Trend Analysis
        for channel in key_channels:
            # Transaction count trends
            jan_col = f'{channel}_CR_CNT_JAN'
            feb_col = f'{channel}_CR_CNT_FEB'
            mar_col = f'{channel}_CR_CNT_MAR'
            
            if all(col in txn_account.columns for col in [jan_col, feb_col, mar_col]):
                # Growth rates
                txn_account[f'{channel}_CR_GROWTH_JAN_FEB'] = (txn_account[feb_col] - txn_account[jan_col]) / (txn_account[jan_col] + 1)
                txn_account[f'{channel}_CR_GROWTH_FEB_MAR'] = (txn_account[mar_col] - txn_account[feb_col]) / (txn_account[feb_col] + 1)
                
                # Consistency score (lower variance = more consistent)
                txn_account[f'{channel}_CR_CONSISTENCY'] = 1 / (1 + txn_account[[jan_col, feb_col, mar_col]].var(axis=1))
            
            # Amount trends
            jan_amt_col = f'{channel}_CR_AMT_JAN'
            feb_amt_col = f'{channel}_CR_AMT_FEB'
            mar_amt_col = f'{channel}_CR_AMT_MAR'
            
            if all(col in txn_account.columns for col in [jan_amt_col, feb_amt_col, mar_amt_col]):
                txn_account[f'{channel}_AMT_TREND'] = (txn_account[mar_amt_col] - txn_account[jan_amt_col]) / (txn_account[jan_amt_col] + 1)
        
        # 3. Channel Mix and Preferences
        total_digital_cnt = 0
        total_digital_amt = 0
        
        for channel in key_channels:
            if f'{channel}_TOTAL_CR_CNT' in txn_account.columns:
                total_digital_cnt += txn_account[f'{channel}_TOTAL_CR_CNT']
            if f'{channel}_TOTAL_CR_AMT' in txn_account.columns:
                total_digital_amt += txn_account[f'{channel}_TOTAL_CR_AMT']
        
        txn_account['TOTAL_DIGITAL_TXN_CNT'] = total_digital_cnt
        txn_account['TOTAL_DIGITAL_TXN_AMT'] = total_digital_amt
        
        # Channel preferences (percentage of total activity)
        for channel in key_channels:
            if f'{channel}_TOTAL_CR_CNT' in txn_account.columns:
                txn_account[f'{channel}_TXN_SHARE'] = txn_account[f'{channel}_TOTAL_CR_CNT'] / (txn_account['TOTAL_DIGITAL_TXN_CNT'] + 1)
            if f'{channel}_TOTAL_CR_AMT' in txn_account.columns:
                txn_account[f'{channel}_AMT_SHARE'] = txn_account[f'{channel}_TOTAL_CR_AMT'] / (txn_account['TOTAL_DIGITAL_TXN_AMT'] + 1)
        
        # 4. High-Value Transaction Indicators
        # RTGS is typically for high-value transactions
        if 'RTGS_TOTAL_CR_AMT' in txn_account.columns and 'RTGS_TOTAL_CR_CNT' in txn_account.columns:
            txn_account['AVG_RTGS_TXN_SIZE'] = txn_account['RTGS_TOTAL_CR_AMT'] / (txn_account['RTGS_TOTAL_CR_CNT'] + 1)
            txn_account['HIGH_VALUE_INDICATOR'] = (txn_account['RTGS_TOTAL_CR_AMT'] > 0).astype(int)
        
        # 5. Activity Consistency Score
        monthly_totals = []
        for month in months:
            month_total = 0
            for channel in key_channels:
                if f'{channel}_CR_CNT_{month}' in txn_account.columns:
                    month_total += txn_account[f'{channel}_CR_CNT_{month}']
            monthly_totals.append(month_total)
        
        if len(monthly_totals) == 3:
            monthly_df = pd.DataFrame(monthly_totals).T
            txn_account['MONTHLY_ACTIVITY_VARIANCE'] = monthly_df.var(axis=1)
            txn_account['ACTIVITY_CONSISTENCY_SCORE'] = 1 / (1 + txn_account['MONTHLY_ACTIVITY_VARIANCE'])
        
        # 6. Final Key Features Only (Remove individual monthly columns to reduce dimensionality)
        key_features = ['ACCT_NBR']
        
        # Keep only aggregate and ratio features
        pattern_keep = [
            '_TOTAL_', '_SHARE', '_GROWTH_', '_CONSISTENCY', '_TREND', 
            'TOTAL_DIGITAL_', 'AVG_RTGS_', 'HIGH_VALUE_', 'ACTIVITY_CONSISTENCY'
        ]
        
        for col in txn_account.columns:
            if any(pattern in col for pattern in pattern_keep):
                key_features.append(col)
        
        # Keep only essential features
        txn_account = txn_account[key_features]
        
        # Create final summary features for segmentation
        txn_account['DR_NO'] = sum([txn_account[f'{ch}_TOTAL_DR_CNT'] for ch in key_channels if f'{ch}_TOTAL_DR_CNT' in txn_account.columns])
        txn_account['CR_NO'] = sum([txn_account[f'{ch}_TOTAL_CR_CNT'] for ch in key_channels if f'{ch}_TOTAL_CR_CNT' in txn_account.columns])
        txn_account['DR_AMT'] = sum([txn_account[f'{ch}_TOTAL_DR_AMT'] for ch in key_channels if f'{ch}_TOTAL_DR_AMT' in txn_account.columns])
        txn_account['CR_AMT'] = sum([txn_account[f'{ch}_TOTAL_CR_AMT'] for ch in key_channels if f'{ch}_TOTAL_CR_AMT' in txn_account.columns])
        
        print(f"Transaction data processed: {len(txn_account)} accounts")
        print(f"Key features created: {len([col for col in txn_account.columns if col != 'ACCT_NBR'])}")
        print("Key features for high-value segmentation:")
        for feature in [col for col in txn_account.columns if col != 'ACCT_NBR'][:10]:  # Show first 10
            print(f"  - {feature}")
        if len(txn_account.columns) > 11:
            print(f"  ... and {len(txn_account.columns) - 11} more")
    
except Exception as e:
    print(f"Warning: Could not load transaction data: {e}")
    print("Proceeding without transaction data...")
    txn_account = None

# --- Step 2: Enhanced Transaction Feature Engineering ---
print("Step 2: Creating advanced transaction features for high-value segmentation...")

if txn_account is not None:
    # Digital Sophistication Score
    digital_channels = ['UPI', 'NEFT', 'RTGS', 'INB']
    digital_weights = {'INB': 4, 'RTGS': 3, 'NEFT': 2, 'UPI': 1}  # Higher weights for more sophisticated channels
    
    txn_account['DIGITAL_SOPHISTICATION'] = 0
    for channel in digital_channels:
        share_col = f'{channel}_TXN_SHARE'
        if share_col in txn_account.columns:
            weight = digital_weights.get(channel, 1)
            txn_account['DIGITAL_SOPHISTICATION'] += txn_account[share_col] * weight
    
    # Transaction Behavior Segments
    if 'TOTAL_DIGITAL_TXN_CNT' in txn_account.columns and 'TOTAL_DIGITAL_TXN_AMT' in txn_account.columns:
        # Create segments based on frequency and value
        txn_account['TXN_FREQUENCY_SEGMENT'] = pd.cut(
            txn_account['TOTAL_DIGITAL_TXN_CNT'],
            bins=[-1, 0, 10, 50, 200, np.inf],
            labels=['Inactive', 'Low', 'Medium', 'High', 'Very_High']
        )
        
        txn_account['TXN_VALUE_SEGMENT'] = pd.cut(
            txn_account['TOTAL_DIGITAL_TXN_AMT'],
            bins=[-1, 0, 100000, 1000000, 10000000, np.inf],
            labels=['No_Value', 'Low_Value', 'Medium_Value', 'High_Value', 'Premium_Value']
        )
        
        # Average transaction size
        txn_account['AVG_TXN_SIZE'] = txn_account['TOTAL_DIGITAL_TXN_AMT'] / (txn_account['TOTAL_DIGITAL_TXN_CNT'] + 1)
        
        # High-value customer indicators
        txn_account['PREMIUM_TXN_BEHAVIOR'] = (
            (txn_account['TOTAL_DIGITAL_TXN_AMT'] > txn_account['TOTAL_DIGITAL_TXN_AMT'].quantile(0.8)) &
            (txn_account['DIGITAL_SOPHISTICATION'] > txn_account['DIGITAL_SOPHISTICATION'].quantile(0.7))
        ).astype(int)
    
    # Keep only essential columns for merging
    essential_cols = [
        'ACCT_NBR', 'DR_NO', 'CR_NO', 'DR_AMT', 'CR_AMT',
        'DIGITAL_SOPHISTICATION', 'ACTIVITY_CONSISTENCY_SCORE',
        'TXN_FREQUENCY_SEGMENT', 'TXN_VALUE_SEGMENT', 'AVG_TXN_SIZE',
        'PREMIUM_TXN_BEHAVIOR'
    ]
    
    # Add high-value indicators
    high_value_cols = [col for col in txn_account.columns if 'HIGH_VALUE' in col or 'RTGS' in col or 'SHARE' in col]
    essential_cols.extend([col for col in high_value_cols if col in txn_account.columns])
    
    # Keep only essential columns
    txn_account = txn_account[[col for col in essential_cols if col in txn_account.columns]]
    
    print(f"Final transaction features: {len(txn_account.columns) - 1}")  # -1 for ACCT_NBR
