import pandas as pd
import numpy as np
from datetime import datetime

# Load and prepare data
df = pd.read_csv('Book1_small.csv')
df['ACCT_OPN_DT'] = pd.to_datetime(df['ACCT_OPN_DT'], format='%d/%m/%y', errors='coerce')
df['REPORT_DT'] = pd.to_datetime(df['REPORT_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_CR_DT'] = pd.to_datetime(df['LST_CUST_CR_DT'], format='%d/%m/%y', errors='coerce')
df['LST_CUST_DR_DT'] = pd.to_datetime(df['LST_CUST_DR_DT'], format='%d/%m/%y', errors='coerce')

OBSERVATION_PERIOD_DAYS = 90
reference_date = df['REPORT_DT'].max()
df_sb = df[df['PF_FAC_REPT'] == 'SB'].copy()

# --- Digital Engagement Score ---
digital_features = ['ATM', 'MBS', 'YONO', 'UPI', 'INB']
base_weights_digital = {'INB': 5, 'YONO': 4, 'MBS': 3, 'UPI': 2, 'ATM': 1}
overall_usage_digital = df_sb[digital_features].mean()
tier_usage_digital = df_sb.groupby('CUST_CLASS')[digital_features].mean()

weights_digital = {}
for tier in tier_usage_digital.index:
    weights_digital[tier] = {}
    for feature in digital_features:
        tier_avg = tier_usage_digital.loc[tier, feature]
        overall_avg = overall_usage_digital[feature]
        weights_digital[tier][feature] = base_weights_digital[feature] * (tier_avg / (overall_avg + 0.01))

def compute_digital_engagement(row):
    tier = row['CUST_CLASS']
    if tier not in weights_digital:
        return 0
    score = 0
    for feature in digital_features:
        if row[feature] == 1:
            score += weights_digital[tier][feature]
    return score

df_sb['digital_engagement'] = df_sb.apply(compute_digital_engagement, axis=1)

# --- Transaction Score ---
transaction_features = ['DR_AMT', 'CR_AMT']
base_weights_transaction = {'DR_AMT': 1, 'CR_AMT': 1}
overall_usage_transaction = df_sb[transaction_features].mean()
tier_usage_transaction = df_sb.groupby('CUST_CLASS')[transaction_features].mean()

weights_transaction = {}
for tier in tier_usage_transaction.index:
    weights_transaction[tier] = {}
    for feature in transaction_features:
        tier_avg = tier_usage_transaction.loc[tier, feature]
        overall_avg = overall_usage_transaction[feature]
        weights_transaction[tier][feature] = base_weights_transaction[feature] * (tier_avg / (overall_avg + 0.01))

def compute_transaction_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_transaction:
        return 0
    score = 0
    for feature in transaction_features:
        score += weights_transaction[tier][feature] * row[feature]
    return score

df_sb['transaction_score'] = df_sb.apply(compute_transaction_score, axis=1)

# --- Product Score ---
product_features = ['FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN']
base_weights_product = {'FD': 3, 'RD': 2, 'PERSONAL_LOAN': 4, 'HOME_LOAN': 5}
overall_usage_product = df_sb[product_features].mean()
tier_usage_product = df_sb.groupby('CUST_CLASS')[product_features].mean()

weights_product = {}
for tier in tier_usage_product.index:
    weights_product[tier] = {}
    for feature in product_features:
        tier_avg = tier_usage_product.loc[tier, feature]
        overall_avg = overall_usage_product[feature]
        weights_product[tier][feature] = base_weights_product[feature] * (tier_avg / (overall_avg + 0.01))

def compute_product_score(row):
    tier = row['CUST_CLASS']
    if tier not in weights_product:
        return 0
    score = 0
    for feature in product_features:
        if row[feature] == 1:
            score += weights_product[tier][feature]
    return score

df_sb['product_score'] = df_sb.apply(compute_product_score, axis=1)

# --- Behavioral Features ---

# Transaction frequency and velocity (3-month period)
df_sb['transaction_frequency'] = df_sb['DR_NO'] + df_sb['CR_NO']
df_sb['transaction_velocity_3m'] = df_sb['transaction_frequency'] / OBSERVATION_PERIOD_DAYS  # per day
df_sb['monthly_transaction_rate'] = df_sb['transaction_frequency'] / 3  # per month

# Average transaction amount
df_sb['avg_transaction_amt'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / (df_sb['transaction_frequency'] + 1e-6)

# Balance stability and growth (using AVG_BAL_QTD)
df_sb['balance_stability'] = df_sb['AVG_BAL_QTD'] / (df_sb['END_OF_DAY_BAL'] + 1e-6)
df_sb['balance_growth_indicator'] = df_sb['END_OF_DAY_BAL'] / (df_sb['AVG_BAL_QTD'] + 1e-6)
df_sb['monthly_balance_trend'] = df_sb['AVG_BAL_MTD'] / (df_sb['AVG_BAL_QTD'] + 1e-6)

# Investment, loan, and service features
investment_products = ['FD', 'RD', 'SBI_MF', 'SBI_CAP', 'NPS']
df_sb['investment_orientation'] = df_sb[investment_products].sum(axis=1)
df_sb['investment_diversity'] = df_sb[investment_products].gt(0).sum(axis=1)

loan_products = ['PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN', 'EDUCATION_LOAN']
df_sb['loan_sophistication'] = df_sb[loan_products].sum(axis=1)
df_sb['secured_loan_preference'] = (df_sb['HOME_LOAN'] + df_sb['CAR_LOAN']) / (df_sb['loan_sophistication'] + 1e-6)

service_products = ['SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'LOCKER', 'APY', 'PMJJY', 'PMSBY']
df_sb['service_adoption'] = df_sb[service_products].sum(axis=1)

# Premium customer indicator
df_sb['premium_banking'] = ((df_sb['CUST_CLASS'].isin(['ROHDIUM', 'PLATINUM', 'DIAMOND'])) &
                           (df_sb['AVG_BAL_QTD'] > df_sb['AVG_BAL_QTD'].quantile(0.8))).astype(int)

# Channel preference sophistication
df_sb['channel_sophistication'] = (df_sb['YONO'] * 3 + df_sb['INB'] * 2 + df_sb['UPI'] * 1.5 +
                                  df_sb['MBS'] * 1 + df_sb['ATM'] * 0.5)

# Cross-sell success (products per year of tenure)
df_sb['cross_sell_success'] = df_sb['TOTAL_PRODUCT'] / (df_sb['TENURE_DAYS'] / 365 + 1e-6)

# Relationship depth
df_sb['relationship_depth'] = (df_sb['investment_orientation'] + df_sb['loan_sophistication'] +
                              df_sb['service_adoption'] + df_sb['digital_engagement'])

# --- Pre-Aggregation Features ---

# Average transaction amounts
df_sb['AVG_DR_AMT'] = df_sb['DR_AMT'] / df_sb['DR_NO'].replace(0, 1)
df_sb['AVG_CR_AMT'] = df_sb['CR_AMT'] / df_sb['CR_NO'].replace(0, 1)

# Days since last transaction
df_sb['DAYS_SINCE_LAST_CR'] = (reference_date - df_sb['LST_CUST_CR_DT']).dt.days
df_sb['DAYS_SINCE_LAST_DR'] = (reference_date - df_sb['LST_CUST_DR_DT']).dt.days
df_sb['days_since_last_txn'] = df_sb[['DAYS_SINCE_LAST_CR', 'DAYS_SINCE_LAST_DR']].min(axis=1, skipna=True)

# Net flow in 3-month period
df_sb['net_flow_amt'] = df_sb['CR_AMT'] - df_sb['DR_AMT']
df_sb['net_flow_ratio'] = df_sb['net_flow_amt'] / (df_sb['CR_AMT'] + df_sb['DR_AMT'] + 1e-6)

# Balance utilization (using AVG_BAL_QTD)
df_sb['balance_utilization'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / (df_sb['AVG_BAL_QTD'] + 1e-6)
df_sb['monthly_balance_utilization'] = df_sb['balance_utilization'] / 3

# Peak balance ratio
df_sb['peak_balance_ratio'] = df_sb['END_OF_DAY_BAL'] / (df_sb['AVG_BAL_QTD'] + 1e-6)

# Product diversity
product_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'SBI_MF', 'UPI', 'INB']
df_sb['product_diversity'] = df_sb[product_cols].gt(0).sum(axis=1) / len(product_cols)

# Ratios
loan_cols = ['PERSONAL_LOAN', 'HOME_LOAN']
investment_cols = ['FD', 'RD', 'SBI_MF']
df_sb['loan_to_investment'] = df_sb[loan_cols].sum(axis=1) / (df_sb[investment_cols].sum(axis=1) + 1e-6)

digital_cols = ['MBS', 'YONO', 'UPI', 'INB']
physical_cols = ['ATM', 'LOCKER']
df_sb['digital_to_physical'] = df_sb[digital_cols].sum(axis=1) / (df_sb[physical_cols].sum(axis=1) + 1e-6)

# Other features
df_sb['agri_activity_flag'] = ((df_sb['AGRI'] == 1) & (df_sb['AGRI_LOAN'] > 0)).astype(int)
df_sb['JNT_ACCT_FLG_NUM'] = df_sb['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)
df_sb['joint_adjusted_dr_amt'] = df_sb['DR_AMT'] / df_sb['JNT_ACCT_FLG_NUM']

# Dormancy risk (3-month period)
df_sb['dormancy_risk_3m'] = (df_sb['days_since_last_txn'] > 30).astype(int)
df_sb['severe_dormancy_risk'] = (df_sb['days_since_last_txn'] > 60).astype(int)

# Interaction Features
df_sb['transaction_intensity_3m'] = df_sb['transaction_frequency'] / OBSERVATION_PERIOD_DAYS
df_sb['tenure_txn_interaction'] = df_sb['TENURE_DAYS'] * df_sb['transaction_intensity_3m']
df_sb['product_balance_interaction'] = df_sb['TOTAL_PRODUCT'] * df_sb['AVG_BAL_QTD']

# Additional 3-Month Behavioral Indicators
df_sb['value_intensity_3m'] = (df_sb['DR_AMT'] + df_sb['CR_AMT']) / OBSERVATION_PERIOD_DAYS
df_sb['credit_to_debit_ratio'] = df_sb['CR_AMT'] / (df_sb['DR_AMT'] + 1e-6)
df_sb['transaction_count_ratio'] = df_sb['CR_NO'] / (df_sb['DR_NO'] + 1e-6)

# Activity level in 3-month period
df_sb['activity_level_3m'] = pd.cut(df_sb['transaction_frequency'],
                                   bins=[0, 5, 20, 50, float('inf')],
                                   labels=['Low', 'Medium', 'High', 'Very_High'])

import pandas as pd

# Aggregation dictionary
agg_dict = {
    # Identity & Demographics
    'CUST_CLASS': 'first',
    'CUST_CAT': lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0],
    'SALARY': 'max',
    'STAFF': 'max',
    'NRI': 'max',
    'AGRI': 'max',
    'SME': 'max',
    'SBF': 'max',
    'SSI': 'max',

    # Financial Position & Behavior
    'END_OF_DAY_BAL': 'sum',
    'AVG_BAL_MTD': 'sum',
    'AVG_BAL_QTD': 'sum',
    'AVG_BAL_YTD': 'sum',
    'AQB': 'sum',
    'TDV': 'sum',
    'DR_AMT': 'sum',
    'CR_AMT': 'sum',
    'DR_NO': 'sum',
    'CR_NO': 'sum',

    # Product Holdings
    'SAVINGS_BANK': 'max',
    'FD': 'max',
    'RD': 'max',
    'PERSONAL_LOAN': 'max',
    'HOME_LOAN': 'max',
    'CAR_LOAN': 'max',
    'TWO_WHEELER': 'max',
    'EDUCATION_LOAN': 'max',
    'GOLD_LOAN': 'max',
    'AGRI_LOAN': 'max',
    'SME_LOAN': 'max',
    'HOME_LOAN_AMT': 'sum',
    'SBI_MF': 'max',
    'SBI_CAP': 'max',
    'SBI_CARD': 'max',
    'SBI_LFE': 'max',
    'SBI_GNRL': 'max',
    'APY': 'max',
    'NPS': 'max',
    'PMJJY': 'max',
    'PMSBY': 'max',

    # Channel Usage
    'ATM': 'max',
    'MBS': 'max',
    'YONO': 'max',
    'UPI': 'max',
    'INB': 'max',
    'LOCKER': 'max',

    # Product Metrics (will recalculate TOTAL_PRODUCT post-aggregation)
    'TOTAL_PRODUCT': 'sum',  # Temporary, will override
    'TOTAL_PRODUCT_EXCL_SERVICES': 'sum',  # Temporary, will override

    # Account Characteristics
    'JNT_ACCT_FLG': lambda x: x.mode().iloc[0] if not x.mode().empty else 'N',
    'ACCT_OPN_DT': 'min',
    'LST_CUST_CR_DT': 'max',
    'LST_CUST_DR_DT': 'max',
    'REPORT_DT': 'max',

    # Basic Behavioral Features
    'TENURE_DAYS': 'max',
    'AVG_DR_AMT': 'mean',
    'AVG_CR_AMT': 'mean',
    'DAYS_SINCE_LAST_CR': 'min',
    'DAYS_SINCE_LAST_DR': 'min',
    'net_flow_amt': 'sum',
    'balance_utilization': 'mean',
    'peak_balance_ratio': 'mean',
    'product_diversity': 'mean',
    'loan_to_investment': 'mean',
    'digital_to_physical': 'mean',
    'agri_activity_flag': 'max',
    'joint_adjusted_dr_amt': 'sum',
    'days_since_last_txn': 'min',
    'dormancy_risk': 'max',
    'product_adoption_rate': 'mean',  # Will recalculate
    'product_balance_interaction': 'sum',  # Will recalculate
    'tenure_txn_interaction': 'sum',  # Will recalculate

    # Enhanced Behavioral Features
    'transaction_frequency': 'sum',
    'transaction_velocity': 'mean',  # Will recalculate
    'high_value_txn_ratio': 'mean',
    'balance_stability': 'mean',
    'wealth_accumulation': 'mean',
    'investment_orientation': 'max',
    'investment_diversity': 'max',
    'loan_sophistication': 'max',
    'secured_loan_preference': 'mean',
    'service_adoption': 'max',
    'premium_banking': 'max',
    'channel_sophistication': 'max',
    'cross_sell_success': 'mean',  # Will recalculate
    'relationship_depth': 'max',

    # Weighted Scores
    'digital_engagement': 'sum',
    'transaction_score': 'sum',
    'product_score': 'sum'
}

# Aggregate to customer level
df_customer = df_sb.groupby('CUST_NBR').agg(agg_dict).reset_index()

# Post-aggregation feature engineering
df_customer['JNT_ACCT_FLG_NUM'] = df_customer['JNT_ACCT_FLG'].map({'Y': 2, 'N': 1}).fillna(1)
df_customer['joint_adjusted_dr_amt'] = df_customer['DR_AMT'] / df_customer['JNT_ACCT_FLG_NUM']
df_customer['dormancy_risk'] = (df_customer['days_since_last_txn'] > 90).astype(int)

# Recalculate product counts
product_cols = ['SAVINGS_BANK', 'FD', 'RD', 'PERSONAL_LOAN', 'HOME_LOAN', 'CAR_LOAN',
                'TWO_WHEELER', 'EDUCATION_LOAN', 'GOLD_LOAN', 'AGRI_LOAN', 'SME_LOAN',
                'SBI_MF', 'SBI_CAP', 'SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS',
                'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT'] = df_customer[product_cols].eq(1).sum(axis=1)
service_cols = ['SBI_MF', 'SBI_CAP', 'SBI_CARD', 'SBI_LFE', 'SBI_GNRL', 'APY', 'NPS', 'PMJJY', 'PMSBY']
df_customer['TOTAL_PRODUCT_EXCL_SERVICES'] = df_customer[product_cols].eq(1).sum(axis=1) - df_customer[service_cols].eq(1).sum(axis=1)

# Recalculate behavioral features
df_customer['product_adoption_rate'] = df_customer['TOTAL_PRODUCT'] / (df_customer['TENURE_DAYS'] / 365 + 1e-6)
df_customer['product_balance_interaction'] = df_customer['TOTAL_PRODUCT'] * df_customer['AVG_BAL_YTD']
df_customer['tenure_txn_interaction'] = df_customer['TENURE_DAYS'] * (df_customer['DR_NO'] + df_customer['CR_NO'])
df_customer['transaction_velocity'] = df_customer['transaction_frequency'] / (df_customer['TENURE_DAYS'] + 1e-6)
df_customer['cross_sell_success'] = df_customer['TOTAL_PRODUCT'] / (len(product_cols) + 1e-6)






SALARY	STAFF	NRI	AGRI	SME	SBF	SSI	END_OF_DAY_BAL	AVG_BAL_MTD	AVG_BAL_QTD	AVG_BAL_YTD	AQB	TDV	DR_AMT	CR_AMT	DR_NO	CR_NO	SAVINGS_BANK	FD	RD	PERSONAL_LOAN	HOME_LOAN	CAR_LOAN	TWO_WHEELER	EDUCATION_LOAN	GOLD_LOAN	AGRI_LOAN	SME_LOAN	HOME_LOAN_AMT	SBI_MF	SBI_CAP	SBI_CARD	SBI_LFE	SBI_GNRL	APY	NPS	PMJJY	PMSBY	ATM	MBS	YONO	UPI	INB	LOCKER	TOTAL_PRODUCT	TOTAL_PRODUCT_EXCL_SERVICES	ACCT_OPN_DT	LST_CUST_CR_DT	LST_CUST_DR_DT	REPORT_DT	TENURE_DAYS	AVG_DR_AMT	AVG_CR_AMT	DAYS_SINCE_LAST_CR	DAYS_SINCE_LAST_DR	net_flow_amt	balance_utilization	peak_balance_ratio	product_diversity	loan_to_investment	digital_to_physical	agri_activity_flag	joint_adjusted_dr_amt	days_since_last_txn	dormancy_risk	product_adoption_rate	product_balance_interaction	tenure_txn_interaction	txn_frequency	txn_velocity	high_value_txn_ratio	balance_stability	investment_orientation	investment_diversity	loan_sophistication	secured_loan_preference	service_adoption	premium_banking	channel_sophistication	cross_sell_success	relationship_depth	digital_engagement	transaction_score	product_score	JNT_ACCT_FLG_NUM
count	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	4.534990e+05	4.534990e+05	4.534990e+05	4.534990e+05	4.534990e+05	4.534990e+05	4.534990e+05	4.534990e+05	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	4.534990e+05	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	444309	453499	450220	453499	453499.000000	4.534990e+05	4.534990e+05	453499.000000	450220.000000	4.534990e+05	453499.000000	453499.000000	453499.000000	4.534990e+05	4.534990e+05	453499.000000	4.534990e+05	453499.000000	453499.00000	4.534990e+05	4.534990e+05	4.534990e+05	453499.000000	453499.000000	4.534990e+05	4.534990e+05	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	453499.000000	4.534990e+05	453499.000000	453499.000000
mean	0.190468	0.011678	0.053753	0.017590	0.044501	0.005958	0.003321	2.796904e+06	2.803372e+06	2.806358e+06	2.549999e+06	5.157571e+06	1.003950e+07	-1.160730e+06	1.132342e+06	10.261377	6.666802	0.999892	0.356559	0.010333	0.020995	0.024622	0.020759	0.000046	0.000393	0.002181	0.000523	0.001442	1.242404e+05	0.115769	0.027065	0.106163	0.119976	0.218777	0.003804	0.008159	0.041279	0.167546	0.840068	0.176858	0.363136	0.249242	0.691426	0.085021	2.246281	1.437743	2009-02-23 09:49:50.224371456	2025-01-12 03:53:02.160930560	2024-11-15 14:00:11.642308352	2025-03-31 00:00:00	5878.439106	-1.398704e+05	1.276297e+05	77.838169	135.416532	2.293072e+06	-0.025434	0.980503	0.308605	2.362741e+04	7.904009e+04	0.000496	-1.053256e+06	29.512151	0.07368	7.033181e+00	5.257370e+06	9.180332e+04	16.928178	2.214833	7.556428e+02	1.449664e+09	0.517884	0.517884	0.066768	0.041989	0.742566	0.025358	3.443016	0.112314	8.106347	6.822363	-8.857357e+03	1.327572	1.269807
min	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000e+00	2.638870e+02	1.000002e+06	-2.690104e+05	0.000000e+00	0.000000e+00	-2.275113e+10	1.590000e+03	0.000000	1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000e+00	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1899-12-31 00:00:00	2006-05-29 00:00:00	1899-12-31 00:00:00	2025-03-31 00:00:00	0.000000	-3.279464e+09	5.519773e+01	0.000000	0.000000	1.591000e+03	-49.551190	0.000000	0.125000	0.000000e+00	0.000000e+00	0.000000	-2.275113e+10	0.000000	0.00000	0.000000e+00	-5.380208e+05	0.000000e+00	1.000000	0.000022	-1.788649e+08	2.399458e-02	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	-2.931251e+09	0.000000	1.000000
25%	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.141432e+06	1.179397e+06	1.210336e+06	1.028737e+06	1.241060e+06	1.319286e+06	-2.000000e+05	1.266967e+04	0.000000	1.000000	1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000e+00	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.000000	1.000000	2003-11-29 00:00:00	2025-02-25 00:00:00	2025-02-11 00:00:00	2025-03-31 00:00:00	3902.000000	-3.025000e+04	8.516000e+03	4.000000	2.000000	2.870350e+04	-0.035855	0.936910	0.250000	0.000000e+00	0.000000e+00	0.000000	-1.649569e+05	1.000000	0.00000	7.945399e-02	1.630436e+06	9.569000e+03	2.000000	0.000405	-4.840445e+03	9.673448e-01	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.500000	0.050000	2.954517	1.113892	-5.251656e+04	0.000000	1.000000
50%	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.540977e+06	1.576693e+06	1.580691e+06	1.418236e+06	1.657664e+06	2.041923e+06	-3.454650e+04	4.183871e+04	2.000000	2.000000	1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000e+00	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.000000	0.000000	0.000000	0.000000	1.000000	0.000000	2.000000	1.000000	2009-04-05 00:00:00	2025-03-10 00:00:00	2025-03-20 00:00:00	2025-03-31 00:00:00	5786.000000	-5.700287e+03	1.595657e+04	21.000000	11.000000	1.079340e+05	0.006637	1.006135	0.250000	0.000000e+00	9.999990e-01	0.000000	-2.750000e+04	5.000000	0.00000	1.366187e-01	2.873771e+06	2.697300e+04	5.000000	0.001035	2.486062e+03	9.939022e-01	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	2.500000	0.100000	7.719016	5.719016	8.852351e+03	0.000000	1.000000
75%	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	2.417822e+06	2.448323e+06	2.411321e+06	2.223287e+06	2.589086e+06	3.767649e+06	0.000000e+00	1.197849e+05	9.000000	4.000000	1.000000	1.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000e+00	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	1.000000	0.000000	1.000000	0.000000	1.000000	0.000000	3.000000	2.000000	2014-09-09 00:00:00	2025-03-27 00:00:00	2025-03-29 00:00:00	2025-03-31 00:00:00	7779.000000	0.000000e+00	3.408326e+04	34.000000	48.000000	4.020950e+05	0.021692	1.033792	0.375000	0.000000e+00	2.999997e+00	0.000000	0.000000e+00	23.000000	0.00000	2.381030e-01	5.126602e+06	7.745700e+04	14.000000	0.003238	7.967862e+03	1.067510e+00	1.000000	1.000000	0.000000	0.000000	1.000000	0.000000	5.500000	0.150000	11.942400	10.942400	3.768938e+04	2.908999	2.000000
max	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.527807e+10	1.233413e+10	1.198200e+10	8.235616e+09	2.942309e+11	2.324388e+11	0.000000e+00	2.293639e+10	41571.000000	295156.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	7.400000e+08	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	1.000000	14.000000	7.000000	2025-03-31 00:00:00	2025-03-31 00:00:00	2025-03-31 00:00:00	2025-03-31 00:00:00	45746.000000	0.000000e+00	1.800101e+09	6881.000000	45746.000000	4.568752e+10	41.022648	41.676081	1.000000	2.000000e+06	4.000000e+06	1.000000	0.000000e+00	3640.000000	1.00000	3.000000e+06	2.470685e+10	6.956921e+08	295160.000000	1000000.000000	4.929999e+08	2.911003e+14	5.000000	5.000000	3.000000	1.000000	7.000000	1.000000	8.000000	0.700000	33.351293	385.924404	4.607399e+09	235.628911	2.000000
std	0.392671	0.107432	0.225530	0.131455	0.206205	0.076959	0.057531	3.759674e+07	3.334747e+07	3.250988e+07	2.781422e+07	4.754706e+08	5.873431e+08	6.447478e+07	6.707309e+07	79.142610	449.510237	0.010394	0.478983	0.101125	0.143366	0.154970	0.142575	0.006805	0.019808	0.046648	0.022855	0.037948	2.188240e+06	0.319948	0.162273	0.308047	0.324934	0.413417	0.061557	0.089957	0.198935	0.373463	0.366543	0.381549	0.480904	0.432575	0.461905	0.278913	1.272469	0.574761	NaN	NaN	NaN	NaN	3798.581710	6.083772e+06	4.345599e+06	241.416465	1465.547879	1.309777e+08	0.591331	0.488696	0.134484	1.560389e+05	3.235315e+05	0.022269	6.309920e+07	81.999407	0.26125	4.454853e+03	5.780493e+07	1.120336e+06	458.032268	1484.951743	1.259065e+06	4.824095e+11	0.686298	0.686298	0.268958	0.198843	0.932802	0.157211	2.646880	0.063623	5.664847	5.187635	1.474521e+07	2.164669	0.443860



           ACCT_NBR  UPI_CR_CNT_JAN25  UPI_DR_CNT_JAN25  UPI_CR_AMT_JAN25  UPI_DR_AMT_JAN25  NEFT_CR_CNT_JAN25  NEFT_DR_CNT_JAN25  NEFT_CR_AMT_JAN25  NEFT_DR_AMT_JAN25  RTGS_CR_CNT_JAN25  RTGS_DR_CNT_JAN25  RTGS_CR_AMT_JAN25  RTGS_DR_AMT_JAN25  AEPS_CR_CNT_JAN25  AEPS_DR_CNT_JAN25  AEPS_CR_AMT_JAN25  AEPS_DR_AMT_JAN25  BRNCH_CR_CNT_JAN25  BRNCH_DR_CNT_JAN25  BRNCH_CR_AMT_JAN25  BRNCH_DR_AMT_JAN25  INB_CR_CNT_JAN25  INB_DR_CNT_JAN25  INB_CR_AMT_JAN25  INB_DR_AMT_JAN25
0  VVVVVVYVVVVLVBVD                 0                 0               0.0              0.00                  1                  0            46946.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
1  VVVVVVYVVVVLYULV                 0                 0               0.0              0.00                  1                  0            54605.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
2  VVVVVVYVVVVDUVBL                 0                 0               0.0              0.00                  0                  0                0.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
3  VVVVVVYVVVVTBTDT                 0                 0               0.0              0.00                  1                  0           101081.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   2                 0.0             55000.0                 0                 0              0.00              0.00
4  VVVVVVYVVVVQDDDL                 0                 6               0.0           4558.80                  1                  0           154391.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
5  VVVVVVYVVVYLOQUV                 0                 0               0.0              0.00                  0                  0                0.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   1                   3            908191.0            140000.0                 0                 0              0.00              0.00
6  VVVVVVYVVVYLUTUO                 0                 0               0.0              0.00                  0                  0                0.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
7  VVVVVVYVVVOBULDL                 0                 0               0.0              0.00                  2                  0           160270.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 0              0.00              0.00
8  VVVVVVYVVVOQOTLY                 2                34           32000.0         143573.12                  0                  0                0.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   0                   0                 0.0                 0.0                 0                 1              0.00            925.27
9  VVVVVVYVVVLOOYZZ                 0                 0               0.0              0.00                  0                  0                0.0                0.0                  0                  0                0.0                0.0                  0                  0                0.0                0.0                   1                   2            500000.0            679590.0                 2                 0         257226.08              0.00


<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2013502 entries, 0 to 2013501
Data columns (total 26 columns):
 #   Column              Dtype  
---  ------              -----  
 0   Unnamed: 0          int64  
 1   ACCT_NBR            object 
 2   UPI_CR_CNT_JAN25    int64  
 3   UPI_DR_CNT_JAN25    int64  
 4   UPI_CR_AMT_JAN25    float64
 5   UPI_DR_AMT_JAN25    float64
 6   NEFT_CR_CNT_JAN25   int64  
 7   NEFT_DR_CNT_JAN25   int64  
 8   NEFT_CR_AMT_JAN25   float64
 9   NEFT_DR_AMT_JAN25   float64
 10  RTGS_CR_CNT_JAN25   int64  
 11  RTGS_DR_CNT_JAN25   int64  
 12  RTGS_CR_AMT_JAN25   float64
 13  RTGS_DR_AMT_JAN25   float64
 14  AEPS_CR_CNT_JAN25   int64  
 15  AEPS_DR_CNT_JAN25   int64  
 16  AEPS_CR_AMT_JAN25   float64
 17  AEPS_DR_AMT_JAN25   float64
 18  BRNCH_CR_CNT_JAN25  int64  
 19  BRNCH_DR_CNT_JAN25  int64  
 20  BRNCH_CR_AMT_JAN25  float64
 21  BRNCH_DR_AMT_JAN25  float64
 22  INB_CR_CNT_JAN25    int64  
 23  INB_DR_CNT_JAN25    int64  
 24  INB_CR_AMT_JAN25    float64
 25  INB_DR_AMT_JAN25    float64
dtypes: float64(12), int64(13), object(1)
memory usage: 399.4+ MB

