# --- Step 1: Load and Process Monthly Transaction Data ---
print("Step 1: Loading and processing monthly transaction data...")

try:
    # Load transaction CSVs
    jan_txn = pd.read_csv('jan_transactions.csv')
    feb_txn = pd.read_csv('feb_transactions.csv')
    mar_txn = pd.read_csv('mar_transactions.csv')
    
    # Standardize column names for each month
    month_prefixes = ['JAN25', 'FEB25', 'MAR25']
    txn_dfs = [jan_txn, feb_txn, mar_txn]
    month_names = ['JAN', 'FEB', 'MAR']
    
    processed_monthly_data = {}
    
    for i, (df, month_prefix, month_name) in enumerate(zip(txn_dfs, month_prefixes, month_names)):
        print(f"Processing {month_name} transactions...")
        
        # Standardize column names
        df.columns = [col.replace(f'_{month_prefix}', '') for col in df.columns]
        
        # Define aggregation dictionary for this month
        txn_agg_dict = {
            'UPI_CR_CNT': 'sum',
            'UPI_DR_CNT': 'sum', 
            'UPI_CR_AMT': 'sum',
            'UPI_DR_AMT': 'sum',
            'NEFT_CR_CNT': 'sum',
            'NEFT_DR_CNT': 'sum',
            'NEFT_CR_AMT': 'sum',
            'NEFT_DR_AMT': 'sum',
            'RTGS_CR_CNT': 'sum',
            'RTGS_DR_CNT': 'sum',
            'RTGS_CR_AMT': 'sum',
            'RTGS_DR_AMT': 'sum',
            'AEPS_CR_CNT': 'sum',
            'AEPS_DR_CNT': 'sum',
            'AEPS_CR_AMT': 'sum',
            'AEPS_DR_AMT': 'sum',
            'BRNCH_CR_CNT': 'sum',
            'BRNCH_DR_CNT': 'sum',
            'BRNCH_CR_AMT': 'sum',
            'BRNCH_DR_AMT': 'sum',
            'INB_CR_CNT': 'sum',
            'INB_DR_CNT': 'sum',
            'INB_CR_AMT': 'sum',
            'INB_DR_AMT': 'sum',
        }
        
        # Check which columns exist in the data
        existing_cols = [col for col in txn_agg_dict.keys() if col in df.columns]
        filtered_agg_dict = {col: txn_agg_dict[col] for col in existing_cols}
        
        # Aggregate to account level for this month
        monthly_account = df.groupby('ACCT_NBR').agg(filtered_agg_dict).reset_index()
        
        # Compute monthly totals
        dr_cols = [col for col in ['UPI_DR_CNT', 'NEFT_DR_CNT', 'RTGS_DR_CNT', 'AEPS_DR_CNT', 'BRNCH_DR_CNT', 'INB_DR_CNT'] if col in monthly_account.columns]
        cr_cols = [col for col in ['UPI_CR_CNT', 'NEFT_CR_CNT', 'RTGS_CR_CNT', 'AEPS_CR_CNT', 'BRNCH_CR_CNT', 'INB_CR_CNT'] if col in monthly_account.columns]
        dr_amt_cols = [col for col in ['UPI_DR_AMT', 'NEFT_DR_AMT', 'RTGS_DR_AMT', 'AEPS_DR_AMT', 'BRNCH_DR_AMT', 'INB_DR_AMT'] if col in monthly_account.columns]
        cr_amt_cols = [col for col in ['UPI_CR_AMT', 'NEFT_CR_AMT', 'RTGS_CR_AMT', 'AEPS_CR_AMT', 'BRNCH_CR_AMT', 'INB_CR_AMT'] if col in monthly_account.columns]
        
        monthly_account[f'DR_NO_{month_name}'] = monthly_account[dr_cols].sum(axis=1) if dr_cols else 0
        monthly_account[f'CR_NO_{month_name}'] = monthly_account[cr_cols].sum(axis=1) if cr_cols else 0
        monthly_account[f'DR_AMT_{month_name}'] = monthly_account[dr_amt_cols].sum(axis=1) if dr_amt_cols else 0
        monthly_account[f'CR_AMT_{month_name}'] = monthly_account[cr_amt_cols].sum(axis=1) if cr_amt_cols else 0
        monthly_account[f'TXN_CNT_{month_name}'] = monthly_account[f'DR_NO_{month_name}'] + monthly_account[f'CR_NO_{month_name}']
        monthly_account[f'TXN_AMT_{month_name}'] = monthly_account[f'DR_AMT_{month_name}'] + monthly_account[f'CR_AMT_{month_name}']
        
        # Digital vs Traditional split for each month
        digital_dr_cols = [col for col in ['UPI_DR_CNT', 'INB_DR_CNT'] if col in monthly_account.columns]
        digital_cr_cols = [col for col in ['UPI_CR_CNT', 'INB_CR_CNT'] if col in monthly_account.columns]
        digital_dr_amt_cols = [col for col in ['UPI_DR_AMT', 'INB_DR_AMT'] if col in monthly_account.columns]
        digital_cr_amt_cols = [col for col in ['UPI_CR_AMT', 'INB_CR_AMT'] if col in monthly_account.columns]
        
        monthly_account[f'DIGITAL_TXN_CNT_{month_name}'] = (
            monthly_account[digital_dr_cols].sum(axis=1) + monthly_account[digital_cr_cols].sum(axis=1) 
            if digital_dr_cols or digital_cr_cols else 0
        )
        monthly_account[f'DIGITAL_TXN_AMT_{month_name}'] = (
            monthly_account[digital_dr_amt_cols].sum(axis=1) + monthly_account[digital_cr_amt_cols].sum(axis=1) 
            if digital_dr_amt_cols or digital_cr_amt_cols else 0
        )
        
        # High value transactions (RTGS + NEFT)
        hv_dr_cols = [col for col in ['RTGS_DR_CNT', 'NEFT_DR_CNT'] if col in monthly_account.columns]
        hv_cr_cols = [col for col in ['RTGS_CR_CNT', 'NEFT_CR_CNT'] if col in monthly_account.columns]
        hv_dr_amt_cols = [col for col in ['RTGS_DR_AMT', 'NEFT_DR_AMT'] if col in monthly_account.columns]
        hv_cr_amt_cols = [col for col in ['RTGS_CR_AMT', 'NEFT_CR_AMT'] if col in monthly_account.columns]
        
        monthly_account[f'HV_TXN_CNT_{month_name}'] = (
            monthly_account[hv_dr_cols].sum(axis=1) + monthly_account[hv_cr_cols].sum(axis=1) 
            if hv_dr_cols or hv_cr_cols else 0
        )
        monthly_account[f'HV_TXN_AMT_{month_name}'] = (
            monthly_account[hv_dr_amt_cols].sum(axis=1) + monthly_account[hv_cr_amt_cols].sum(axis=1) 
            if hv_dr_amt_cols or hv_cr_amt_cols else 0
        )
        
        # Keep only essential columns for this month
        essential_cols = ['ACCT_NBR'] + [col for col in monthly_account.columns if month_name in col]
        monthly_account = monthly_account[essential_cols]
        
        processed_monthly_data[month_name] = monthly_account
        print(f"{month_name} data processed: {len(monthly_account)} accounts")
    
    print(f"All monthly transaction data processed successfully")
    
except Exception as e:
    print(f"Warning: Could not load transaction data: {e}")
    print("Proceeding without transaction data...")
    processed_monthly_data = {}

# --- Step 2: Load Main Dataset and Merge Monthly Data ---
print("Step 2: Loading main dataset and merging with monthly transaction data...")

df = pd.read_csv('Book1_small.csv')

# Convert date columns with error handling
date_columns = ['ACCT_OPN_DT', 'REPORT_DT', 'LST_CUST_CR_DT', 'LST_CUST_DR_DT']
for col in date_columns:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col], format='%d/%m/%y', errors='coerce')

OBSERVATION_PERIOD_DAYS = 90
reference_date = df['REPORT_DT'].max() if 'REPORT_DT' in df.columns else pd.Timestamp.now()

# Filter for savings bank accounts
df_sb = df[df['PF_FAC_REPT'] == 'SB'].copy() if 'PF_FAC_REPT' in df.columns else df.copy()

# Merge with monthly transaction data
if processed_monthly_data:
    for month_name, monthly_data in processed_monthly_data.items():
        print(f"Merging {month_name} transaction data...")
        df_sb = df_sb.merge(monthly_data, on='ACCT_NBR', how='left', suffixes=('', f'_{month_name}_new'))
        
        # Fill missing values with 0 for transaction columns
        month_cols = [col for col in monthly_data.columns if col != 'ACCT_NBR']
        for col in month_cols:
            if col in df_sb.columns:
                df_sb[col] = df_sb[col].fillna(0)
    
    # Compute quarterly aggregates and trends
    print("Computing quarterly aggregates and trends...")
    
    # Total quarterly values
    months = ['JAN', 'FEB', 'MAR']
    
    # Quarterly totals
    df_sb['DR_NO'] = sum(df_sb.get(f'DR_NO_{month}', 0) for month in months)
    df_sb['CR_NO'] = sum(df_sb.get(f'CR_NO_{month}', 0) for month in months) 
    df_sb['DR_AMT'] = sum(df_sb.get(f'DR_AMT_{month}', 0) for month in months)
    df_sb['CR_AMT'] = sum(df_sb.get(f'CR_AMT_{month}', 0) for month in months)
    df_sb['TXN_CNT_Q1'] = sum(df_sb.get(f'TXN_CNT_{month}', 0) for month in months)
    df_sb['TXN_AMT_Q1'] = sum(df_sb.get(f'TXN_AMT_{month}', 0) for month in months)
    df_sb['DIGITAL_TXN_CNT_Q1'] = sum(df_sb.get(f'DIGITAL_TXN_CNT_{month}', 0) for month in months)
    df_sb['DIGITAL_TXN_AMT_Q1'] = sum(df_sb.get(f'DIGITAL_TXN_AMT_{month}', 0) for month in months)
    df_sb['HV_TXN_CNT_Q1'] = sum(df_sb.get(f'HV_TXN_CNT_{month}', 0) for month in months)
    df_sb['HV_TXN_AMT_Q1'] = sum(df_sb.get(f'HV_TXN_AMT_{month}', 0) for month in months)
    
    # Monthly averages
    df_sb['TXN_CNT_AVG'] = df_sb['TXN_CNT_Q1'] / 3
    df_sb['TXN_AMT_AVG'] = df_sb['TXN_AMT_Q1'] / 3
    
    # Compute trends and ratios
    for metric in ['TXN_CNT', 'TXN_AMT', 'DIGITAL_TXN_CNT', 'DIGITAL_TXN_AMT', 'HV_TXN_CNT', 'HV_TXN_AMT']:
        # Month-over-month growth rates
        jan_val = df_sb.get(f'{metric}_JAN', 0)
        feb_val = df_sb.get(f'{metric}_FEB', 0) 
        mar_val = df_sb.get(f'{metric}_MAR', 0)
        
        # Growth rates (safe division)
        df_sb[f'{metric}_FEB_GROWTH'] = ((feb_val - jan_val) / (jan_val + 1e-6)) * 100
        df_sb[f'{metric}_MAR_GROWTH'] = ((mar_val - feb_val) / (feb_val + 1e-6)) * 100
        df_sb[f'{metric}_Q1_GROWTH'] = ((mar_val - jan_val) / (jan_val + 1e-6)) * 100
        
        # Volatility (coefficient of variation)
        mean_val = (jan_val + feb_val + mar_val) / 3
        std_val = np.sqrt(((jan_val - mean_val)**2 + (feb_val - mean_val)**2 + (mar_val - mean_val)**2) / 3)
        df_sb[f'{metric}_VOLATILITY'] = (std_val / (mean_val + 1e-6)) * 100
        
        # Trend direction (simple linear trend)
        # 1 = increasing, 0 = flat, -1 = decreasing
        df_sb[f'{metric}_TREND'] = np.where(
            mar_val > jan_val, 1,
            np.where(mar_val < jan_val, -1, 0)
        )
    
    # Digital adoption ratios
    df_sb['DIGITAL_TXN_RATIO'] = df_sb['DIGITAL_TXN_CNT_Q1'] / (df_sb['TXN_CNT_Q1'] + 1e-6)
    df_sb['DIGITAL_AMT_RATIO'] = df_sb['DIGITAL_TXN_AMT_Q1'] / (df_sb['TXN_AMT_Q1'] + 1e-6)
    df_sb['HV_TXN_RATIO'] = df_sb['HV_TXN_CNT_Q1'] / (df_sb['TXN_CNT_Q1'] + 1e-6)
    df_sb['HV_AMT_RATIO'] = df_sb['HV_TXN_AMT_Q1'] / (df_sb['TXN_AMT_Q1'] + 1e-6)
    
    # Activity consistency (months with transactions > 0)
    active_months = []
    for month in months:
        active_months.append((df_sb.get(f'TXN_CNT_{month}', 0) > 0).astype(int))
    df_sb['ACTIVE_MONTHS'] = sum(active_months)
    df_sb['ACTIVITY_CONSISTENCY'] = df_sb['ACTIVE_MONTHS'] / 3
    
    # Peak activity identification
    txn_counts = [df_sb.get(f'TXN_CNT_{month}', 0) for month in months]
    peak_month_idx = np.argmax(txn_counts, axis=0)
    df_sb['PEAK_ACTIVITY_MONTH'] = [months[idx] for idx in peak_month_idx]
    
    # Balance and transaction relationship by month
    for month in months:
        if f'TXN_AMT_{month}' in df_sb.columns and 'AVG_BAL_MTD' in df_sb.columns:
            df_sb[f'TXN_TO_BAL_RATIO_{month}'] = df_sb[f'TXN_AMT_{month}'] / (df_sb['AVG_BAL_MTD'] + 1e-6)
    
    print("Monthly transaction analysis completed")
    
else:
    # If no transaction data, create placeholder columns
    print("No transaction data available - creating placeholder columns")
    for col in ['DR_NO', 'CR_NO', 'DR_AMT', 'CR_AMT']:
        if col not in df_sb.columns:
            df_sb[col] = 0

print(f"Main dataset with monthly transactions: {len(df_sb)} records")
