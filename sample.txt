# --- Step 1: Load and Process Monthly Transaction Data ---
print("Step 1: Loading and processing monthly transaction data...")

try:
    # Load transaction CSVs
    jan_txn = pd.read_csv('jan_transactions.csv')
    feb_txn = pd.read_csv('feb_transactions.csv')
    mar_txn = pd.read_csv('mar_transactions.csv')
    
    # Standardize column names and add month identifiers
    month_prefixes = ['JAN25', 'FEB25', 'MAR25']
    month_names = ['JAN', 'FEB', 'MAR']
    txn_dfs = [jan_txn, feb_txn, mar_txn]
    
    processed_monthly_dfs = []
    
    for i, (df, month_prefix, month_name) in enumerate(zip(txn_dfs, month_prefixes, month_names)):
        # Clean column names
        df.columns = [col.replace(f'_{month_prefix}', '') for col in df.columns]
        
        # Add month identifier
        df['MONTH'] = month_name
        
        # Define aggregation dictionary for each month
        month_agg_dict = {}
        
        # Check which transaction columns exist in the data
        transaction_columns = [
            'UPI_CR_CNT', 'UPI_DR_CNT', 'UPI_CR_AMT', 'UPI_DR_AMT',
            'NEFT_CR_CNT', 'NEFT_DR_CNT', 'NEFT_CR_AMT', 'NEFT_DR_AMT',
            'RTGS_CR_CNT', 'RTGS_DR_CNT', 'RTGS_CR_AMT', 'RTGS_DR_AMT',
            'AEPS_CR_CNT', 'AEPS_DR_CNT', 'AEPS_CR_AMT', 'AEPS_DR_AMT',
            'BRNCH_CR_CNT', 'BRNCH_DR_CNT', 'BRNCH_CR_AMT', 'BRNCH_DR_AMT',
            'INB_CR_CNT', 'INB_DR_CNT', 'INB_CR_AMT', 'INB_DR_AMT'
        ]
        
        existing_cols = [col for col in transaction_columns if col in df.columns]
        
        # Aggregate to account level for this month
        for col in existing_cols:
            month_agg_dict[col] = 'sum'
        
        if month_agg_dict:
            month_account = df.groupby('ACCT_NBR').agg(month_agg_dict).reset_index()
            
            # Rename columns to include month prefix
            for col in existing_cols:
                month_account[f'{col}_{month_name}'] = month_account[col]
                month_account = month_account.drop(columns=[col])
            
            # Calculate monthly totals
            dr_cols = [col for col in existing_cols if 'DR_CNT' in col]
            cr_cols = [col for col in existing_cols if 'CR_CNT' in col]
            dr_amt_cols = [col for col in existing_cols if 'DR_AMT' in col]
            cr_amt_cols = [col for col in existing_cols if 'CR_AMT' in col]
            
            month_account[f'DR_NO_{month_name}'] = df.groupby('ACCT_NBR')[dr_cols].sum().sum(axis=1) if dr_cols else 0
            month_account[f'CR_NO_{month_name}'] = df.groupby('ACCT_NBR')[cr_cols].sum().sum(axis=1) if cr_cols else 0
            month_account[f'DR_AMT_{month_name}'] = df.groupby('ACCT_NBR')[dr_amt_cols].sum().sum(axis=1) if dr_amt_cols else 0
            month_account[f'CR_AMT_{month_name}'] = df.groupby('ACCT_NBR')[cr_amt_cols].sum().sum(axis=1) if cr_amt_cols else 0
            
            processed_monthly_dfs.append(month_account)
            print(f"{month_name} transaction data processed: {len(month_account)} accounts")
        else:
            print(f"Warning: No transaction columns found in {month_name} data")
    
    # Merge all monthly data
    if processed_monthly_dfs:
        txn_account = processed_monthly_dfs[0]
        for monthly_df in processed_monthly_dfs[1:]:
            txn_account = txn_account.merge(monthly_df, on='ACCT_NBR', how='outer')
        
        # Fill missing values with 0 for accounts that don't exist in all months
        txn_account = txn_account.fillna(0)
        
        print(f"Monthly transaction data merged: {len(txn_account)} total accounts")
    else:
        txn_account = None
        print("No transaction data could be processed")
    
except Exception as e:
    print(f"Warning: Could not load transaction data: {e}")
    print("Proceeding without transaction data...")
    txn_account = None

# --- Step 1.5: Create Monthly Transaction Features and Ratios ---
if txn_account is not None:
    print("Step 1.5: Creating monthly transaction features and ratios...")
    
    months = ['JAN', 'FEB', 'MAR']
    
    # Calculate quarterly totals
    dr_no_cols = [f'DR_NO_{month}' for month in months if f'DR_NO_{month}' in txn_account.columns]
    cr_no_cols = [f'CR_NO_{month}' for month in months if f'CR_NO_{month}' in txn_account.columns]
    dr_amt_cols = [f'DR_AMT_{month}' for month in months if f'DR_AMT_{month}' in txn_account.columns]
    cr_amt_cols = [f'CR_AMT_{month}' for month in months if f'CR_AMT_{month}' in txn_account.columns]
    
    if dr_no_cols:
        txn_account['DR_NO'] = txn_account[dr_no_cols].sum(axis=1)
    if cr_no_cols:
        txn_account['CR_NO'] = txn_account[cr_no_cols].sum(axis=1)
    if dr_amt_cols:
        txn_account['DR_AMT'] = txn_account[dr_amt_cols].sum(axis=1)
    if cr_amt_cols:
        txn_account['CR_AMT'] = txn_account[cr_amt_cols].sum(axis=1)
    
    # Monthly trends and volatility
    if len(dr_no_cols) >= 2:
        txn_account['DR_NO_TREND'] = txn_account[dr_no_cols[-1]] - txn_account[dr_no_cols[0]]  # Mar - Jan
        txn_account['DR_NO_VOLATILITY'] = txn_account[dr_no_cols].std(axis=1)
        txn_account['DR_NO_GROWTH_RATE'] = (txn_account[dr_no_cols[-1]] / (txn_account[dr_no_cols[0]] + 1e-6)) - 1
    
    if len(cr_no_cols) >= 2:
        txn_account['CR_NO_TREND'] = txn_account[cr_no_cols[-1]] - txn_account[cr_no_cols[0]]  # Mar - Jan
        txn_account['CR_NO_VOLATILITY'] = txn_account[cr_no_cols].std(axis=1)
        txn_account['CR_NO_GROWTH_RATE'] = (txn_account[cr_no_cols[-1]] / (txn_account[cr_no_cols[0]] + 1e-6)) - 1
    
    if len(dr_amt_cols) >= 2:
        txn_account['DR_AMT_TREND'] = txn_account[dr_amt_cols[-1]] - txn_account[dr_amt_cols[0]]
        txn_account['DR_AMT_VOLATILITY'] = txn_account[dr_amt_cols].std(axis=1)
        txn_account['DR_AMT_GROWTH_RATE'] = (txn_account[dr_amt_cols[-1]] / (txn_account[dr_amt_cols[0]] + 1e-6)) - 1
    
    if len(cr_amt_cols) >= 2:
        txn_account['CR_AMT_TREND'] = txn_account[cr_amt_cols[-1]] - txn_account[cr_amt_cols[0]]
        txn_account['CR_AMT_VOLATILITY'] = txn_account[cr_amt_cols].std(axis=1)
        txn_account['CR_AMT_GROWTH_RATE'] = (txn_account[cr_amt_cols[-1]] / (txn_account[cr_amt_cols[0]] + 1e-6)) - 1
    
    # Monthly ratios
    for month in months:
        if f'DR_AMT_{month}' in txn_account.columns and f'CR_AMT_{month}' in txn_account.columns:
            # Credit to Debit ratio for each month
            txn_account[f'CR_TO_DR_RATIO_{month}'] = txn_account[f'CR_AMT_{month}'] / (txn_account[f'DR_AMT_{month}'] + 1e-6)
            
            # Net flow for each month
            txn_account[f'NET_FLOW_{month}'] = txn_account[f'CR_AMT_{month}'] - txn_account[f'DR_AMT_{month}']
            
            # Total activity for each month
            txn_account[f'TOTAL_AMT_{month}'] = txn_account[f'CR_AMT_{month}'] + txn_account[f'DR_AMT_{month}']
        
        if f'DR_NO_{month}' in txn_account.columns and f'CR_NO_{month}' in txn_account.columns:
            # Transaction count ratio for each month
            txn_account[f'CR_TO_DR_CNT_RATIO_{month}'] = txn_account[f'CR_NO_{month}'] / (txn_account[f'DR_NO_{month}'] + 1e-6)
            
            # Total transaction count for each month
            txn_account[f'TOTAL_TXN_{month}'] = txn_account[f'CR_NO_{month}'] + txn_account[f'DR_NO_{month}']
        
        # Average transaction amount per month
        if f'TOTAL_AMT_{month}' in txn_account.columns and f'TOTAL_TXN_{month}' in txn_account.columns:
            txn_account[f'AVG_TXN_AMT_{month}'] = txn_account[f'TOTAL_AMT_{month}'] / (txn_account[f'TOTAL_TXN_{month}'] + 1e-6)
    
    # Cross-month comparisons
    if len(months) >= 2:
        # Month-over-month changes
        for i in range(1, len(months)):
            prev_month = months[i-1]
            curr_month = months[i]
            
            if f'TOTAL_AMT_{prev_month}' in txn_account.columns and f'TOTAL_AMT_{curr_month}' in txn_account.columns:
                txn_account[f'AMT_MOM_CHANGE_{prev_month}_TO_{curr_month}'] = (
                    txn_account[f'TOTAL_AMT_{curr_month}'] - txn_account[f'TOTAL_AMT_{prev_month}']
                )
                txn_account[f'AMT_MOM_GROWTH_{prev_month}_TO_{curr_month}'] = (
                    txn_account[f'TOTAL_AMT_{curr_month}'] / (txn_account[f'TOTAL_AMT_{prev_month}'] + 1e-6)
                ) - 1
            
            if f'TOTAL_TXN_{prev_month}' in txn_account.columns and f'TOTAL_TXN_{curr_month}' in txn_account.columns:
                txn_account[f'TXN_MOM_CHANGE_{prev_month}_TO_{curr_month}'] = (
                    txn_account[f'TOTAL_TXN_{curr_month}'] - txn_account[f'TOTAL_TXN_{prev_month}']
                )
                txn_account[f'TXN_MOM_GROWTH_{prev_month}_TO_{curr_month}'] = (
                    txn_account[f'TOTAL_TXN_{curr_month}'] / (txn_account[f'TOTAL_TXN_{prev_month}'] + 1e-6)
                ) - 1
    
    # Channel-wise monthly analysis
    channels = ['UPI', 'NEFT', 'RTGS', 'AEPS', 'BRNCH', 'INB']
    
    for channel in channels:
        channel_amt_cols = [f'{channel}_CR_AMT_{month}' for month in months 
                           if f'{channel}_CR_AMT_{month}' in txn_account.columns]
        channel_cnt_cols = [f'{channel}_CR_CNT_{month}' for month in months 
                           if f'{channel}_CR_CNT_{month}' in txn_account.columns]
        
        if channel_amt_cols:
            # Total channel usage across months
            txn_account[f'{channel}_TOTAL_AMT'] = txn_account[channel_amt_cols].sum(axis=1)
            
            # Channel consistency (how many months was this channel used)
            txn_account[f'{channel}_CONSISTENCY'] = (txn_account[channel_amt_cols] > 0).sum(axis=1)
            
            # Channel growth (first to last month)
            if len(channel_amt_cols) >= 2:
                txn_account[f'{channel}_GROWTH'] = (
                    txn_account[channel_amt_cols[-1]] / (txn_account[channel_amt_cols[0]] + 1e-6)
                ) - 1
    
    # Activity consistency across months
    total_amt_cols = [f'TOTAL_AMT_{month}' for month in months if f'TOTAL_AMT_{month}' in txn_account.columns]
    if total_amt_cols:
        txn_account['ACTIVITY_CONSISTENCY'] = (txn_account[total_amt_cols] > 0).sum(axis=1)
        txn_account['ACTIVITY_COEFFICIENT_VARIATION'] = (
            txn_account[total_amt_cols].std(axis=1) / (txn_account[total_amt_cols].mean(axis=1) + 1e-6)
        )
    
    # Digital vs Traditional channel ratios
    digital_channels = ['UPI', 'INB', 'MBS']  # Add MBS if available
    traditional_channels = ['BRNCH', 'AEPS']
    
    for month in months:
        digital_amt = 0
        traditional_amt = 0
        
        for channel in digital_channels:
            if f'{channel}_CR_AMT_{month}' in txn_account.columns:
                digital_amt += txn_account[f'{channel}_CR_AMT_{month}']
                digital_amt += txn_account.get(f'{channel}_DR_AMT_{month}', 0)
        
        for channel in traditional_channels:
            if f'{channel}_CR_AMT_{month}' in txn_account.columns:
                traditional_amt += txn_account[f'{channel}_CR_AMT_{month}']
                traditional_amt += txn_account.get(f'{channel}_DR_AMT_{month}', 0)
        
        if digital_amt > 0 or traditional_amt > 0:
            txn_account[f'DIGITAL_AMT_{month}'] = digital_amt
            txn_account[f'TRADITIONAL_AMT_{month}'] = traditional_amt
            txn_account[f'DIGITAL_TO_TRADITIONAL_RATIO_{month}'] = digital_amt / (traditional_amt + 1e-6)
    
    print(f"Monthly transaction features created: {len([col for col in txn_account.columns if any(month in col for month in months)])} monthly features")

# --- Step 2: Load Main Dataset and Merge (UPDATED) ---
print("Step 2: Loading main dataset and merging with monthly transaction data...")

df = pd.read_csv('Book1_small.csv')

# Convert date columns with error handling
date_columns = ['ACCT_OPN_DT', 'REPORT_DT', 'LST_CUST_CR_DT', 'LST_CUST_DR_DT']
for col in date_columns:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col], format='%d/%m/%y', errors='coerce')

OBSERVATION_PERIOD_DAYS = 90
reference_date = df['REPORT_DT'].max() if 'REPORT_DT' in df.columns else pd.Timestamp.now()

# Filter for savings bank accounts
df_sb = df[df['PF_FAC_REPT'] == 'SB'].copy() if 'PF_FAC_REPT' in df.columns else df.copy()

# Merge with monthly transaction data if available
if txn_account is not None:
    print(f"Merging transaction data...")
    print(f"Main dataset accounts: {len(df_sb['ACCT_NBR'].unique())}")
    print(f"Transaction data accounts: {len(txn_account['ACCT_NBR'].unique())}")
    
    # Check overlap
    main_accounts = set(df_sb['ACCT_NBR'])
    txn_accounts = set(txn_account['ACCT_NBR'])
    overlap = len(main_accounts.intersection(txn_accounts))
    print(f"Account overlap: {overlap} ({overlap/len(main_accounts)*100:.1f}%)")
    
    df_sb = df_sb.merge(txn_account, on='ACCT_NBR', how='left')
    
    # Fill missing transaction data with 0
    txn_columns = [col for col in txn_account.columns if col != 'ACCT_NBR']
    for col in txn_columns:
        if col in df_sb.columns:
            df_sb[col] = df_sb[col].fillna(0)
    
    print(f"Transaction data merged successfully")
else:
    print("No transaction data to merge")

print(f"Main dataset prepared: {len(df_sb)} records")
