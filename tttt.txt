import pandas as pd

# Assuming your DataFrame is df and cluster labels are in 'KmeansCluster'
# Replace 'HIGH_VALUE_SCORE' with your actual high value score column name, e.g., 'TRANSACTION_SCORE'

high_value_score_col = 'TRANSACTION_SCORE'  # Adjust if your actual high value score column differs

# Define grouped features â€” choose only relevant and non-overlapping groups with key features
feature_groups = {
    'Transaction Features': [
        'TDV', 'TOTAL_NEFT_DR_AMT', 'TOTAL_NEFT_CNT', 'TOTAL_NEFT_AMT',
        'TOTAL_RTGS_DR_CNT', 'TOTAL_RTGS_CNT', 'TOTAL_RTGS_AMT',
        'NEFT_AVG_TXN_VALUE', 'RTGS_AVG_TXN_VALUE', 'TXN_FREQ',
        'AVG_DR_AMT', 'AVG_CR_AMT', 'NET_FLOW_AMT', 'NET_FLOW_RATIO'
    ],
    'Balance & Growth': [
        'AQB', 'BAL_STAB', 'BAL_GTH_IND', 'MTH_BAL_TREND', 'BAL_UTIL'
    ],
    'Customer Engagement': [
        'PRODUCT_SCORE', 'TOTAL_PRODUCT', 'TOTAL_PRODUCT_EXCL_SERVICES',
        'RELATION_DEPTH', 'PREM_BANK', 'PROD_DIVERSITY', 'CROSS_SELL_SUCCESS'
    ],
    'Digital Engagement': [
        'DIGITAL_ENGAGE', 'DIGI_TO_PHYS'
    ],
    'Risk & Dormancy': [
        'DORM_RISK', 'SEV_DORM_RISK', 'DAY_SINCE_LST_TXN', 'DAYS_SINCE_LAST_CR', 'DAYS_SINCE_LAST_DR'
    ],
    'Loan & Credit': [
        'LOAN_SOPHISTICATION', 'SEC_LOAN_PREF', 'CR_TO_DR_RATIO'
    ],
    'Growth & Consistency': [
        'NEFT_CNT_GROWTH', 'RTGS_CNT_GROWTH', 'RTGS_AMT_GROWTH', 'NEFT_CONSISTENCY', 'RTGS_CONSISTENCY'
    ],
    'Customer Profile': [
        'TENURE_DAYS', 'CUST_AGE'
    ]
}

# Add High Value Score as a separate group for easy reference
feature_groups['High Value Score'] = [high_value_score_col]

# Function to calculate mean and median per cluster for grouped features
def clustered_summary(df, cluster_col, grouped_features):
    mean_dfs = []
    median_dfs = []

    for group_name, features in grouped_features.items():
        # Filter existing features only to avoid errors
        valid_features = [f for f in features if f in df.columns]
        
        if not valid_features:
            continue
        
        mean_df = df.groupby(cluster_col)[valid_features].mean()
        mean_df.columns = [f"{group_name} - Mean - {col}" for col in mean_df.columns]
        
        median_df = df.groupby(cluster_col)[valid_features].median()
        median_df.columns = [f"{group_name} - Median - {col}" for col in median_df.columns]
        
        mean_dfs.append(mean_df)
        median_dfs.append(median_df)
    
    # Combine horizontally (by columns)
    combined_mean = pd.concat(mean_dfs, axis=1)
    combined_median = pd.concat(median_dfs, axis=1)

    return combined_mean, combined_median

# Run summary
mean_summary, median_summary = clustered_summary(df, 'KmeansCluster', feature_groups)

# Optionally, show or export
print("=== Combined Mean Summary by Cluster ===")
print(mean_summary)

print("\n=== Combined Median Summary by Cluster ===")
print(median_summary)

# Save CSV if needed
# mean_summary.to_csv('clustered_mean_summary.csv')
# median_summary.to_csv('clustered_median_summary.csv')
