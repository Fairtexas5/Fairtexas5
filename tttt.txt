from sklearn.preprocessing import MinMaxScaler

score_features = [
    'TRANSACTION_SCORE',
    'TOTAL_TRANS_AMT',
    'TOTAL_TRANS_CNT',
    'AVG_TXN_VALUE_COMBINED',
    'BAL_GROWTH_STAB',
    'ENGAGEMENT_SCORE',
    'LOAN_PREF_INDEX',
    'TOTAL_DORM_RISK'
]

# Min-max scaling
scaler = MinMaxScaler()
df_scaled = df.copy()
df_scaled[[f + '_SCALED' for f in score_features]] = scaler.fit_transform(df[score_features])
scaled_features = [f + '_SCALED' for f in score_features]

weights = {
    'TRANSACTION_SCORE_SCALED':     0.20,
    'TOTAL_TRANS_AMT_SCALED':       0.18,
    'TOTAL_TRANS_CNT_SCALED':       0.13,
    'AVG_TXN_VALUE_COMBINED_SCALED':0.10,
    'BAL_GROWTH_STAB_SCALED':       0.10,
    'ENGAGEMENT_SCORE_SCALED':      0.12,
    'LOAN_PREF_INDEX_SCALED':       0.07,
    'TOTAL_DORM_RISK_SCALED':      -0.10 # negative if risk is bad
}

# Weighted score calculation
df_scaled['CUSTOMER_SCORE'] = sum(
    weights[feat] * df_scaled[feat] for feat in weights
)

# Optionally scale score to 0-100 for business-friendliness
df_scaled['CUSTOMER_SCORE'] = 100 * (df_scaled['CUSTOMER_SCORE'] - df_scaled['CUSTOMER_SCORE'].min()) / (df_scaled['CUSTOMER_SCORE'].max() - df_scaled['CUSTOMER_SCORE'].min() + 1e-6)



# List of features to aggregate per cluster
summary_features = ['CUSTOMER_SCORE'] + scaled_features



# Mean by cluster
mean_by_cluster = df_scaled.groupby('KmeansCluster')[summary_features].mean()

# Median by cluster
median_by_cluster = df_scaled.groupby('KmeansCluster')[summary_features].median()

# Optional: Sorting by cluster number
mean_by_cluster = mean_by_cluster.sort_index(ascending=True)
median_by_cluster = median_by_cluster.sort_index(ascending=True)

print("=== Mean (per feature) by Cluster ===")
print(mean_by_cluster)

print("\n=== Median (per feature) by Cluster ===")
print(median_by_cluster)


