TDV, TOTAL_NEFT_DR_AMT, TOTAL_NEFT_AMT, TOTAL_RTGS_AMT, TOTAL_NEFT_CNT, TOTAL_RTGS_CNT, TRANSACTION_SCORE
AVG_DR_AMT, AVG_CR_AMT, NEFT_AVG_TXN_VALUE, RTGS_AVG_TXN_VALUE
AQB, BAL_STAB, NET_FLOW_AMT, BAL_GTH_IND
TOTAL_PRODUCT, TOTAL_PRODUCT_EXCL_SERVICES, PRODUCT_SCORE, RELATION_DEPTH, PREM_BANK
TENURE_DAYS, RELATION_DEPTH

import pandas as pd
import numpy as np
from sklearn.preprocessing import RobustScaler
from scipy.stats import mstats

# Features list from your data
features = [
    # all your features except categorial ones, adjust as needed
    'AQB', 'TDV', 'DIGITAL_ENGAGE', 'TRANSACTION_SCORE', 'PRODUCT_SCORE',
    'TENURE_DAYS', 'TOTAL_NEFT_DR_AMT', 'TOTAL_NEFT_CNT', 'TOTAL_NEFT_AMT',
    'TOTAL_RTGS_DR_CNT', 'TOTAL_RTGS_CNT', 'TOTAL_RTGS_AMT',
    'NEFT_AMT_RATIO', 'RTGS_AMT_RATIO', 'NEFT_CNT_GROWTH', 'RTGS_CNT_GROWTH',
    'RTGS_AMT_GROWTH', 'NEFT_CONSISTENCY', 'RTGS_CONSISTENCY',
    'NEFT_AVG_TXN_VALUE', 'RTGS_AVG_TXN_VALUE',  # ...add all numeric columns
]

# Separate out the columns that have important high values like 'TDV'
important_features = ['TDV']

# Thresholds for winsorizing columns (except important ones)
winsorizing_columns = [col for col in features if col not in important_features]

# Winsorize capped at 1% and 99% quantiles
df_winsorized = df.copy()
for col in winsorizing_columns:
    df_winsorized[col] = mstats.winsorize(df[col], limits=[0.01, 0.01])

# Robust scaling
scaler = RobustScaler()
df_scaled = df_winsorized.copy()
df_scaled[features] = scaler.fit_transform(df_winsorized[features])

# For TDV (important feature), do not winsorize but still scale robustly
# (already scaled above)

# Now df_scaled is ready for clustering

