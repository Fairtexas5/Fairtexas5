from sklearn.ensemble import RandomForestClassifier
import pandas as pd

# Assuming df is your original dataframe and kmeans_labels is the cluster labels
# Encode categorical features (example with one-hot encoding)
df_encoded = pd.get_dummies(df, columns=['CUST_CLASS', 'CUST_CAT', 'JNT_ACCT_FLG', 'MRTL_STS', 'ACT_LVL'])

# Train Random Forest to predict cluster labels
rf = RandomForestClassifier(random_state=42)
rf.fit(df_encoded, kmeans_labels)

# Get feature importances
importances = pd.DataFrame({
    'Feature': df_encoded.columns,
    'Importance': rf.feature_importances_
}).sort_values(by='Importance', ascending=False)

print(importances)


from sklearn.feature_selection import f_classif
import pandas as pd

# Select numeric features
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
X_numeric = df[numeric_cols]

# Compute ANOVA F-scores
f_scores, p_values = f_classif(X_numeric, kmeans_labels)
f_scores_df = pd.DataFrame({
    'Feature': numeric_cols,
    'F_Score': f_scores
}).sort_values(by='F_Score', ascending=False)

print(f_scores_df)
