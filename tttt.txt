import pandas as pd
import numpy as np
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import silhouette_score
import plotly.express as px
import plotly.graph_objects as go
from math import ceil

# Assuming df contains TSNE1 and TSNE2 from previous t-SNE results
# Replace this with your actual DataFrame
# df = pd.read_csv('your_data.csv')  # Load your data if needed

# Extract t-SNE results for clustering
X_tsne = df[['TSNE1', 'TSNE2']].values

# Step 1: K-Means Clustering with Elbow Method and Silhouette Score
def kmeans_clustering(X, max_k=10):
    inertia = []
    silhouette_scores = []
    k_range = range(2, max_k + 1)
    
    for k in k_range:
        kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
        labels = kmeans.fit_predict(X)
        inertia.append(kmeans.inertia_)
        if k > 1:  # Silhouette score requires at least 2 clusters
            score = silhouette_score(X, labels, sample_size=10000, random_state=42)
            silhouette_scores.append(score)
        else:
            silhouette_scores.append(0)
    
    # Plot Elbow Curve
    fig_elbow = go.Figure()
    fig_elbow.add_trace(go.Scatter(x=list(k_range), y=inertia, mode='lines+markers', name='Inertia'))
    fig_elbow.update_layout(title='Elbow Method for K-Means', xaxis_title='Number of Clusters (k)', yaxis_title='Inertia')
    fig_elbow.show()
    
    # Plot Silhouette Scores
    fig_silhouette = go.Figure()
    fig_silhouette.add_trace(go.Scatter(x=list(k_range), y=silhouette_scores, mode='lines+markers', name='Silhouette Score'))
    fig_silhouette.update_layout(title='Silhouette Score for K-Means', xaxis_title='Number of Clusters (k)', yaxis_title='Silhouette Score')
    fig_silhouette.show()
    
    # Select optimal k (highest silhouette score)
    optimal_k = k_range[np.argmax(silhouette_scores)]
    kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X)
    
    return labels, optimal_k

# Step 2: DBSCAN Clustering
def dbscan_clustering(X, eps_values=[0.5, 1.0, 1.5], min_samples=5):
    best_score = -1
    best_labels = None
    best_eps = None
    
    for eps in eps_values:
        dbscan = DBSCAN(eps=eps, min_samples=min_samples, n_jobs=-1)
        labels = dbscan.fit_predict(X)
        # Check if there are at least 2 clusters (excluding noise)
        if len(np.unique(labels[labels != -1])) > 1:
            score = silhouette_score(X, labels, sample_size=10000, random_state=42)
            if score > best_score:
                best_score = score
                best_labels = labels
                best_eps = eps
    
    print(f"Best DBSCAN eps: {best_eps}, Silhouette Score: {best_score}")
    return best_labels

# Step 3: Visualize Clusters
def plot_clusters(df, X_tsne, kmeans_labels, dbscan_labels, optimal_k):
    df['KMeans_Cluster'] = kmeans_labels
    df['DBSCAN_Cluster'] = dbscan_labels
    
    # K-Means Plot
    fig_kmeans = px.scatter(df, x='TSNE1', y='TSNE2', color='KMeans_Cluster',
                           title=f'K-Means Clustering (k={optimal_k})',
                           labels={'TSNE1': 't-SNE Component 1', 'TSNE2': 't-SNE Component 2'})
    fig_kmeans.show()
    
    # DBSCAN Plot
    fig_dbscan = px.scatter(df, x='TSNE1', y='TSNE2', color='DBSCAN_Cluster',
                           title='DBSCAN Clustering',
                           labels={'TSNE1': 't-SNE Component 1', 'TSNE2': 't-SNE Component 2'})
    fig_dbscan.show()

# Step 4: Interpret Clusters
def interpret_clusters(df, labels, cluster_type='KMeans'):
    df[f'{cluster_type}_Cluster'] = labels
    # Group by cluster and compute mean for key features
    key_features = ['AQB', 'HOME_LOAN_AMT', 'DIGITAL_ENGAGE', 'TRANSACTION_SCORE', 'PRODUCT_SCORE', 'TENURE_DAYS']
    cluster_summary = df.groupby(f'{cluster_type}_Cluster')[key_features].mean()
    print(f"{cluster_type} Cluster Summary:")
    print(cluster_summary)
    return cluster_summary

# Main Execution
def main(df, X_tsne):
    # K-Means Clustering
    kmeans_labels, optimal_k = kmeans_clustering(X_tsne)
    
    # DBSCAN Clustering
    dbscan_labels = dbscan_clustering(X_tsne)
    
    # Visualize Clusters
    plot_clusters(df, X_tsne, kmeans_labels, dbscan_labels, optimal_k)
    
    # Interpret Clusters
    kmeans_summary = interpret_clusters(df, kmeans_labels, 'KMeans')
    dbscan_summary = interpret_clusters(df, dbscan_labels, 'DBSCAN')
    
    return df, kmeans_labels, dbscan_labels

# Example usage
# df, kmeans_labels, dbscan_labels = main(df, X_tsne)
