# Transaction Features
features_txn = [
    'TDV', 'TOTAL_NEFT_DR_AMT', 'TOTAL_NEFT_CNT', 'TOTAL_NEFT_AMT',
    'TOTAL_RTGS_DR_CNT', 'TOTAL_RTGS_CNT', 'TOTAL_RTGS_AMT',
    'NEFT_AVG_TXN_VALUE', 'RTGS_AVG_TXN_VALUE', 'TXN_FREQ',
    'AVG_DR_AMT', 'AVG_CR_AMT', 'NET_FLOW_AMT', 'NET_FLOW_RATIO'
]

# Balance & Loyalty Features
features_balance = [
    'AQB', 'BAL_STAB', 'BAL_GTH_IND', 'MTH_BAL_TREND', 'NET_FLOW_AMT', 'BAL_UTIL'
]

# Customer Profile
features_profile = [
    'TENURE_DAYS', 'PRODUCT_SCORE', 'TOTAL_PRODUCT',
    'TOTAL_PRODUCT_EXCL_SERVICES', 'RELATION_DEPTH', 'PREM_BANK',
    'PROD_DIVERSITY', 'CROSS_SELL_SUCCESS'
]

# Additional groups as you see fit...
# Eg: Engagement, Risk, etc.




def prepare_radar_data(df, cluster_col, group_features):
    # Group by cluster and calculate mean
    cluster_means = df.groupby(cluster_col)[group_features].mean()
    # Normalize for radar chart plotting (0-1 per feature)
    cluster_means_norm = (cluster_means - cluster_means.min()) / (cluster_means.max() - cluster_means.min())
    return cluster_means_norm




import plotly.graph_objects as go

def plot_cluster_radar(cluster_means_norm, group_name):
    categories = list(cluster_means_norm.columns)
    fig = go.Figure()
    for cluster_id in cluster_means_norm.index:
        fig.add_trace(go.Scatterpolar(
            r = cluster_means_norm.loc[cluster_id].values,
            theta = categories,
            fill = 'toself',
            name = f'Cluster {cluster_id}'
        ))
    fig.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0,1])),
        showlegend=True,
        title=f"Cluster Behavior: {group_name}"
    )
    fig.show()






# Transaction Group Radar
txn_data = prepare_radar_data(df, 'KmeansCluster', features_txn)
plot_cluster_radar(txn_data, 'Transaction Features')

# Balance Group Radar
balance_data = prepare_radar_data(df, 'KmeansCluster', features_balance)
plot_cluster_radar(balance_data, 'Balance & Growth')

# Profile/Engagement Group Radar
profile_data = prepare_radar_data(df, 'KmeansCluster', features_profile)
plot_cluster_radar(profile_data, 'Profile & Engagement')





