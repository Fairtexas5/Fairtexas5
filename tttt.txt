import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler
import plotly.express as px
import plotly.graph_objects as go

# Assuming df contains TSNE1, TSNE2, and original features
# Replace with your actual DataFrame
# df = pd.read_csv('your_data.csv')

# Step 1: Prepare Data (Combine t-SNE and Key Features)
def prepare_data(df):
    key_features = ['TSNE1', 'TSNE2', 'AQB', 'DIGITAL_ENGAGE', 'TRANSACTION_SCORE', 
                    'PRODUCT_SCORE', 'TENURE_DAYS', 'HOME_LOAN_AMT']
    X = df[key_features].copy()
    
    # Re-normalize features to ensure consistency
    scaler = StandardScaler()
    X = scaler.fit_transform(X)
    return X, key_features

# Step 2: K-Means Clustering with Extended k Range and Validation
def kmeans_clustering(X, max_k=15):
    inertia = []
    silhouette_scores = []
    k_range = range(2, max_k + 1)
    
    for k in k_range:
        kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
        labels = kmeans.fit_predict(X)
        inertia.append(kmeans.inertia_)
        score = silhouette_score(X, labels, sample_size=10000, random_state=42)
        silhouette_scores.append(score)
    
    # Plot Elbow Curve
    fig_elbow = go.Figure()
    fig_elbow.add_trace(go.Scatter(x=list(k_range), y=inertia, mode='lines+markers', name='Inertia'))
    fig_elbow.update_layout(title='Elbow Method for K-Means', xaxis_title='Number of Clusters (k)', yaxis_title='Inertia')
    fig_elbow.show()
    
    # Plot Silhouette Scores
    fig_silhouette = go.Figure()
    fig_silhouette.add_trace(go.Scatter(x=list(k_range), y=silhouette_scores, mode='lines+markers', name='Silhouette Score'))
    fig_silhouette.update_layout(title='Silhouette Score for K-Means', xaxis_title='Number of Clusters (k)', yaxis_title='Silhouette Score')
    fig_silhouette.show()
    
    # Select optimal k (highest silhouette score)
    optimal_k = k_range[np.argmax(silhouette_scores)]
    kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
    labels = kmeans.fit_predict(X)
    
    print(f"Optimal k: {optimal_k}, Silhouette Score: {max(silhouette_scores):.3f}")
    return labels, optimal_k, inertia

# Step 3: Visualize Clusters
def plot_clusters(df, X, labels, optimal_k, key_features):
    df['KMeans_Cluster'] = labels
    
    # Scatter plot colored by cluster
    fig = px.scatter(df, x='TSNE1', y='TSNE2', color='KMeans_Cluster',
                     title=f'K-Means Clustering (k={optimal_k})',
                     labels={'TSNE1': 't-SNE Component 1', 'TSNE2': 't-SNE Component 2'})
    fig.show()
    
    # Within-cluster variance
    kmeans = KMeans(n_clusters=optimal_k, random_state=42, n_init=10)
    kmeans.fit(X)
    print(f"Within-cluster sum of squares (Inertia): {kmeans.inertia_:.2f}")

# Step 4: Interpret Clusters
def interpret_clusters(df, labels, key_features):
    df['KMeans_Cluster'] = labels
    cluster_summary = df.groupby('KMeans_Cluster')[key_features].mean()
    cluster_sizes = df['KMeans_Cluster'].value_counts().sort_index()
    print("\nCluster Summary (Mean Values):")
    print(cluster_summary)
    print("\nCluster Sizes:")
    print(cluster_sizes)
    
    # Additional business-relevant insights
    high_value_clusters = cluster_summary[cluster_summary['AQB'] > cluster_summary['AQB'].mean()]
    print("\nHigh-Value Clusters (Above Average AQB):")
    print(high_value_clusters[['AQB', 'DIGITAL_ENGAGE', 'TRANSACTION_SCORE']])
    
    return cluster_summary, cluster_sizes

# Main Execution
def main(df):
    # Prepare data
    X, key_features = prepare_data(df)
    
    # Perform K-Means clustering
    kmeans_labels, optimal_k, inertia = kmeans_clustering(X)
    
    # Visualize clusters
    plot_clusters(df, X, kmeans_labels, optimal_k, key_features)
    
    # Interpret clusters
    cluster_summary, cluster_sizes = interpret_clusters(df, kmeans_labels, key_features)
    
    return df, kmeans_labels, cluster_summary

# Example usage
# df, kmeans_labels, cluster_summary = main(df)



from sklearn.neighbors import NearestNeighbors
import plotly.graph_objects as go

def k_distance_plot(X, k=5):
    nbrs = NearestNeighbors(n_neighbors=k).fit(X)
    distances, _ = nbrs.kneighbors(X)
    distances = np.sort(distances[:, k-1], axis=0)
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=np.arange(len(distances)), y=distances, mode='lines'))
    fig.update_layout(title=f'{k}-Distance Plot for DBSCAN', xaxis_title='Points (sorted)', yaxis_title=f'Distance to {k}th Neighbor')
    fig.show()

# Run on a sample to save memory
sample_X = df[['TSNE1', 'TSNE2']].sample(10000, random_state=42).values
k_distance_plot(sample_X)
