import pandas as pd

# ---- Setup ----
file_paths = {
    'JAN': '/mnts/nfs-sbi-pv/S1043553/base_txn_jan25.txt',
    'FEB': '/mnts/nfs-sbi-pv/S1043553/base_txn_feb25.txt',
    'MAR': '/mnts/nfs-sbi-pv/S1043553/base_txn_mar25.txt',
}
month_prefixes = ['JAN25', 'FEB25', 'MAR25']
month_names = ['JAN', 'FEB', 'MAR']

# Transaction modes and fields
modes = ['UPI', 'NEFT', 'RTGS', 'AEPS', 'BRNCH', 'INB']
txn_fields = ['CR_CNT', 'DR_CNT', 'CR_AMT', 'DR_AMT']

# Prepare mode-typed column names for selection
all_mode_columns = [f"{mode}_{field}" for mode in modes for field in txn_fields]

monthly_txn_data = []

# ---- Aggregate for each month ----
for month_name, month_prefix in zip(month_names, month_prefixes):
    file_path = file_paths[month_name]
    print(f"Processing {month_name} from {file_path}")

    df = pd.read_csv(file_path, low_memory=False)
    # Clean column names
    df.columns = [col.upper().replace(f'_{month_prefix}', '') for col in df.columns]
    
    # Keep needed columns if they exist
    existing_cols = [col for col in all_mode_columns if col in df.columns]
    agg_dict = {col: 'sum' for col in existing_cols}
    
    month_agg = df.groupby('ACCT_NBR').agg(agg_dict).reset_index()
    
    # Fill NaN, ensure numeric
    for col in existing_cols:
        month_agg[col] = pd.to_numeric(month_agg[col], errors='coerce').fillna(0)
    
    # Calculate per-mode totals if needed for this month
    for mode in modes:
        mode_cr_cnt = f"{mode}_CR_CNT"
        mode_dr_cnt = f"{mode}_DR_CNT"
        mode_cr_amt = f"{mode}_CR_AMT"
        mode_dr_amt = f"{mode}_DR_AMT"
        if mode_cr_cnt in month_agg and mode_dr_cnt in month_agg:
            month_agg[f"{month_name}_{mode}_TOTAL_CNT"] = month_agg[mode_cr_cnt] + month_agg[mode_dr_cnt]
        if mode_cr_amt in month_agg and mode_dr_amt in month_agg:
            month_agg[f"{month_name}_{mode}_TOTAL_AMT"] = month_agg[mode_cr_amt] + month_agg[mode_dr_amt]

    # Select columns for this month's dataset
    month_keep = ['ACCT_NBR'] + [f"{mode}_{field}" for mode in modes for field in txn_fields if f"{mode}_{field}" in month_agg.columns]
    for mode in modes:
        if f"{month_name}_{mode}_TOTAL_CNT" in month_agg:
            month_keep.append(f"{month_name}_{mode}_TOTAL_CNT")
        if f"{month_name}_{mode}_TOTAL_AMT" in month_agg:
            month_keep.append(f"{month_name}_{mode}_TOTAL_AMT")
    month_agg = month_agg[month_keep]
    monthly_txn_data.append(month_agg)

# ---- Combine all months on 'ACCT_NBR' ----
from functools import reduce
txn_account = reduce(lambda left, right: pd.merge(left, right, on='ACCT_NBR', how='outer'), monthly_txn_data)
txn_account = txn_account.fillna(0)

# ---- Aggregate over 3 months: total and ratio per mode ----
for mode in ['NEFT', 'RTGS']:
    # Sum CR_CNT, DR_CNT, CR_AMT, DR_AMT over all months
    for field in txn_fields:
        total_col = f"TOTAL_{mode}_{field}"
        txn_account[total_col] = sum(
            txn_account.get(f"{mode}_{field}", 0) if f"{mode}_{field}" in txn_account else 0
            for month in month_names
        ) if all(f"{mode}_{field}" in txn_account for month in month_names) else \
            sum([
                txn_account.get(f"{mode}_{field}", 0),
                txn_account.get(f"{mode}_{field}.{month}", 0)
            ] for month in month_names)
    # Total by summing across months
    txn_account[f"TOTAL_{mode}_CNT"] = txn_account[f"TOTAL_{mode}_CR_CNT"] + txn_account[f"TOTAL_{mode}_DR_CNT"]
    txn_account[f"TOTAL_{mode}_AMT"] = txn_account[f"TOTAL_{mode}_CR_AMT"] + txn_account[f"TOTAL_{mode}_DR_AMT"]

# ---- Whole portfolio totals for ratios and segmentation ----
# All credit & debit for all modes
txn_account['TOTAL_ALL_CR_CNT'] = sum([txn_account.get(f"{mode}_CR_CNT", 0) for mode in modes for month in month_names])
txn_account['TOTAL_ALL_DR_CNT'] = sum([txn_account.get(f"{mode}_DR_CNT", 0) for mode in modes for month in month_names])
txn_account['TOTAL_ALL_CR_AMT'] = sum([txn_account.get(f"{mode}_CR_AMT", 0) for mode in modes for month in month_names])
txn_account['TOTAL_ALL_DR_AMT'] = sum([txn_account.get(f"{mode}_DR_AMT", 0) for mode in modes for month in month_names])

txn_account['TOTAL_TXN_CNT'] = txn_account['TOTAL_ALL_CR_CNT'] + txn_account['TOTAL_ALL_DR_CNT']
txn_account['TOTAL_TXN_AMT'] = txn_account['TOTAL_ALL_CR_AMT'] + txn_account['TOTAL_ALL_DR_AMT']

# ---- High-value (RTGS) and NEFT ratios ----
txn_account['RTGS_AMT_RATIO'] = txn_account['TOTAL_RTGS_AMT'] / (txn_account['TOTAL_TXN_AMT'] + 1e-6)
txn_account['NEFT_AMT_RATIO'] = txn_account['TOTAL_NEFT_AMT'] / (txn_account['TOTAL_TXN_AMT'] + 1e-6)

# ---- Growth metrics ----
def calc_growth(df, field, month1, month2):
    val1 = df.get(f"{month1}_{field}", 0)
    val2 = df.get(f"{month2}_{field}", 0)
    return (val2 - val1) / (val1 + 1e-6)

# Transaction count and amount growth: Janâ†’Mar
txn_account['NEFT_CNT_GROWTH'] = calc_growth(txn_account, 'NEFT_TOTAL_CNT', 'JAN', 'MAR')
txn_account['RTGS_CNT_GROWTH'] = calc_growth(txn_account, 'RTGS_TOTAL_CNT', 'JAN', 'MAR')
txn_account['NEFT_AMT_GROWTH'] = calc_growth(txn_account, 'NEFT_TOTAL_AMT', 'JAN', 'MAR')
txn_account['RTGS_AMT_GROWTH'] = calc_growth(txn_account, 'RTGS_TOTAL_AMT', 'JAN', 'MAR')

# ---- Consistency metric for NEFT and RTGS ----
import numpy as np
for mode in ['NEFT', 'RTGS']:
    amt_cols = [f"{month}_{mode}_TOTAL_AMT" for month in month_names if f"{month}_{mode}_TOTAL_AMT" in txn_account.columns]
    if amt_cols:
        monthly_sums = txn_account[amt_cols].values
        monthly_std = np.std(monthly_sums, axis=1)
        monthly_mean = np.mean(monthly_sums, axis=1)
        txn_account[f"{mode}_CONSISTENCY"] = 1 / (monthly_std / (monthly_mean + 1e-6) + 1e-6)
    else:
        txn_account[f"{mode}_CONSISTENCY"] = 0

# ---- Average ticket size per mode ----
for mode in ['NEFT', 'RTGS']:
    txn_account[f"{mode}_AVG_TXN_VALUE"] = txn_account[f"TOTAL_{mode}_AMT"] / (txn_account[f"TOTAL_{mode}_CNT"] + 1e-6)

# ---- Final selection of columns useful for high-value segmentation ----
final_cols = [
    'ACCT_NBR',
    
    # NEFT & RTGS totals
    'TOTAL_NEFT_CR_CNT', 'TOTAL_NEFT_DR_CNT',
    'TOTAL_NEFT_CR_AMT', 'TOTAL_NEFT_DR_AMT',
    'TOTAL_NEFT_CNT', 'TOTAL_NEFT_AMT',
    'TOTAL_RTGS_CR_CNT', 'TOTAL_RTGS_DR_CNT',
    'TOTAL_RTGS_CR_AMT', 'TOTAL_RTGS_DR_AMT',
    'TOTAL_RTGS_CNT', 'TOTAL_RTGS_AMT',
    
    # Portfolio totals and ratios
    'TOTAL_TXN_CNT', 'TOTAL_TXN_AMT', 'NEFT_AMT_RATIO', 'RTGS_AMT_RATIO',

    # Growth & consistency
    'NEFT_CNT_GROWTH', 'RTGS_CNT_GROWTH', 'NEFT_AMT_GROWTH', 'RTGS_AMT_GROWTH',
    'NEFT_CONSISTENCY', 'RTGS_CONSISTENCY',

    # Avgerage ticket sizes
    'NEFT_AVG_TXN_VALUE', 'RTGS_AVG_TXN_VALUE',
]

final_cols = [col for col in final_cols if col in txn_account.columns]
txn_account_final = txn_account[final_cols]

print(f"Enhanced aggregation complete: {len(txn_account_final)} accounts, {len(final_cols)-1} features")
